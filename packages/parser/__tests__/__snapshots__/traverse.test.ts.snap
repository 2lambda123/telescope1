// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos/authz/v1beta1/authz 1`] = `
Object {
  "importNames": Object {
    "google/protobuf/any.proto": Object {
      "Any": "Any",
    },
    "google/protobuf/timestamp.proto": Object {
      "Timestamp": "Timestamp",
    },
  },
  "imports": Array [
    "cosmos_proto/cosmos.proto",
    "google/protobuf/timestamp.proto",
    "gogoproto/gogo.proto",
    "google/protobuf/any.proto",
  ],
  "package": "cosmos.authz.v1beta1",
  "parsedExports": Object {
    "GenericAuthorization": true,
    "Grant": true,
    "GrantAuthorization": true,
    "GrantQueueItem": true,
  },
  "parsedImports": Object {
    "google/protobuf/any.proto": Array [
      "Any",
    ],
    "google/protobuf/timestamp.proto": Array [
      "Timestamp",
    ],
  },
  "root": Object {
    "nested": Object {
      "cosmos": Object {
        "nested": Object {
          "authz": Object {
            "nested": Object {
              "v1beta1": Object {
                "nested": Object {
                  "GenericAuthorization": Object {
                    "comment": "GenericAuthorization gives the grantee unrestricted permissions to execute
the provided method on behalf of the granter's account.",
                    "fields": Object {
                      "msg": Object {
                        "comment": "Msg, identified by it's type URL, to grant unrestricted permissions to execute",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "msg",
                          "(telescope:name)": "msg",
                          "(telescope:orig)": "msg",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "GenericAuthorization",
                    "nested": null,
                    "oneofs": undefined,
                    "options": Object {
                      "(cosmos_proto.implements_interface)": "Authorization",
                    },
                    "type": "Type",
                  },
                  "Grant": Object {
                    "comment": "Grant gives permissions to execute
the provide method with expiration time.",
                    "fields": Object {
                      "authorization": Object {
                        "comment": null,
                        "id": 1,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(cosmos_proto.accepts_interface)": "Authorization",
                          "(telescope:camel)": "authorization",
                          "(telescope:name)": "authorization",
                          "(telescope:orig)": "authorization",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "expiration": Object {
                        "comment": "time when the grant will expire and will be pruned. If null, then the grant
doesn't have a time expiration (other conditions  in \`authorization\`
may apply to invalidate the grant)",
                        "id": 2,
                        "import": "google/protobuf/timestamp.proto",
                        "importedName": "google.protobuf.Timestamp",
                        "options": Object {
                          "(gogoproto.nullable)": true,
                          "(gogoproto.stdtime)": true,
                          "(telescope:camel)": "expiration",
                          "(telescope:name)": "expiration",
                          "(telescope:orig)": "expiration",
                        },
                        "parsedType": Object {
                          "name": "Timestamp",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Timestamp",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "Grant",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "GrantAuthorization": Object {
                    "comment": "GrantAuthorization extends a grant with both the addresses of the grantee and granter.
It is used in genesis.proto and query.proto",
                    "fields": Object {
                      "authorization": Object {
                        "comment": null,
                        "id": 3,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(cosmos_proto.accepts_interface)": "Authorization",
                          "(telescope:camel)": "authorization",
                          "(telescope:name)": "authorization",
                          "(telescope:orig)": "authorization",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "expiration": Object {
                        "comment": null,
                        "id": 4,
                        "import": "google/protobuf/timestamp.proto",
                        "importedName": "google.protobuf.Timestamp",
                        "options": Object {
                          "(gogoproto.stdtime)": true,
                          "(telescope:camel)": "expiration",
                          "(telescope:name)": "expiration",
                          "(telescope:orig)": "expiration",
                        },
                        "parsedType": Object {
                          "name": "Timestamp",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Timestamp",
                      },
                      "grantee": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "grantee",
                          "(telescope:name)": "grantee",
                          "(telescope:orig)": "grantee",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "granter": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "granter",
                          "(telescope:name)": "granter",
                          "(telescope:orig)": "granter",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "GrantAuthorization",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "GrantQueueItem": Object {
                    "comment": "GrantQueueItem contains the list of TypeURL of a sdk.Msg.",
                    "fields": Object {
                      "msgTypeUrls": Object {
                        "comment": "msg_type_urls contains the list of TypeURL of a sdk.Msg.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "msgTypeUrls",
                          "(telescope:name)": "msgTypeUrls",
                          "(telescope:orig)": "msg_type_urls",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "GrantQueueItem",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`cosmos/tx/signing/v1beta1/signing 1`] = `
Object {
  "importNames": Object {
    "cosmos/crypto/multisig/v1beta1/multisig.proto": Object {
      "CompactBitArray": "CompactBitArray",
    },
    "google/protobuf/any.proto": Object {
      "Any": "Any",
    },
  },
  "imports": Array [
    "cosmos/crypto/multisig/v1beta1/multisig.proto",
    "google/protobuf/any.proto",
  ],
  "package": "cosmos.tx.signing.v1beta1",
  "parsedExports": Object {
    "SignatureDescriptor": true,
    "SignatureDescriptors": true,
  },
  "parsedImports": Object {
    "cosmos/crypto/multisig/v1beta1/multisig.proto": Array [
      "CompactBitArray",
    ],
    "google/protobuf/any.proto": Array [
      "Any",
    ],
  },
  "root": Object {
    "nested": Object {
      "cosmos": Object {
        "nested": Object {
          "tx": Object {
            "nested": Object {
              "signing": Object {
                "nested": Object {
                  "v1beta1": Object {
                    "nested": Object {
                      "SignMode": Object {
                        "comment": "SignMode represents a signing mode with its own security guarantees.

This enum should be considered a registry of all known sign modes
in the Cosmos ecosystem. Apps are not expected to support all known
sign modes. Apps that would like to support custom  sign modes are
encouraged to open a small PR against this file to add a new case
to this SignMode enum describing their sign mode so that different
apps have a consistent version of this enum.",
                        "comments": Object {
                          "SIGN_MODE_DIRECT": "SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
verified with raw bytes from Tx.",
                          "SIGN_MODE_DIRECT_AUX": "SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
require signers signing over other signers' \`signer_info\`. It also allows
for adding Tips in transactions.

Since: cosmos-sdk 0.46",
                          "SIGN_MODE_LEGACY_AMINO_JSON": "SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
Amino JSON and will be removed in the future.",
                          "SIGN_MODE_TEXTUAL": "SIGN_MODE_TEXTUAL is a future signing mode that will verify some
human-readable textual representation on top of the binary representation
from SIGN_MODE_DIRECT. It is currently not supported.",
                          "SIGN_MODE_UNSPECIFIED": "SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
rejected.",
                        },
                        "name": "SignMode",
                        "type": "Enum",
                        "values": Object {
                          "SIGN_MODE_DIRECT": 1,
                          "SIGN_MODE_DIRECT_AUX": 3,
                          "SIGN_MODE_LEGACY_AMINO_JSON": 127,
                          "SIGN_MODE_TEXTUAL": 2,
                          "SIGN_MODE_UNSPECIFIED": 0,
                        },
                      },
                      "SignatureDescriptor": Object {
                        "comment": "SignatureDescriptor is a convenience type which represents the full data for
a signature including the public key of the signer, signing modes and the
signature itself. It is primarily used for coordinating signatures between
clients.",
                        "fields": Object {
                          "data": Object {
                            "comment": null,
                            "id": 2,
                            "options": Object {
                              "(telescope:camel)": "data",
                              "(telescope:name)": "data",
                              "(telescope:orig)": "data",
                            },
                            "parsedType": Object {
                              "name": "Data",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.tx.signing.v1beta1",
                              "SignatureDescriptor",
                            ],
                            "type": "Data",
                          },
                          "publicKey": Object {
                            "comment": "public_key is the public key of the signer",
                            "id": 1,
                            "import": "google/protobuf/any.proto",
                            "importedName": "google.protobuf.Any",
                            "options": Object {
                              "(telescope:camel)": "publicKey",
                              "(telescope:name)": "publicKey",
                              "(telescope:orig)": "public_key",
                            },
                            "parsedType": Object {
                              "name": "Any",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Any",
                          },
                          "sequence": Object {
                            "comment": "sequence is the sequence of the account, which describes the
number of committed transactions signed by a given address. It is used to prevent
replay attacks.",
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "sequence",
                              "(telescope:name)": "sequence",
                              "(telescope:orig)": "sequence",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                        },
                        "keyTypes": Array [],
                        "name": "SignatureDescriptor",
                        "nested": Object {
                          "Data": Object {
                            "comment": "Data represents signature data",
                            "fields": Object {
                              "multi": Object {
                                "comment": "multi represents a multisig signer",
                                "id": 2,
                                "options": Object {
                                  "(telescope:camel)": "multi",
                                  "(telescope:name)": "multi",
                                  "(telescope:orig)": "multi",
                                },
                                "parsedType": Object {
                                  "name": "Multi",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "cosmos.tx.signing.v1beta1",
                                  "SignatureDescriptor",
                                  "Data",
                                ],
                                "type": "Multi",
                              },
                              "single": Object {
                                "comment": "single represents a single signer",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "single",
                                  "(telescope:name)": "single",
                                  "(telescope:orig)": "single",
                                },
                                "parsedType": Object {
                                  "name": "Single",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "cosmos.tx.signing.v1beta1",
                                  "SignatureDescriptor",
                                  "Data",
                                ],
                                "type": "Single",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "Data",
                            "nested": Object {
                              "Multi": Object {
                                "comment": "Multi is the signature data for a multisig public key",
                                "fields": Object {
                                  "bitarray": Object {
                                    "comment": "bitarray specifies which keys within the multisig are signing",
                                    "id": 1,
                                    "import": "cosmos/crypto/multisig/v1beta1/multisig.proto",
                                    "importedName": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
                                    "options": Object {
                                      "(telescope:camel)": "bitarray",
                                      "(telescope:name)": "bitarray",
                                      "(telescope:orig)": "bitarray",
                                    },
                                    "parsedType": Object {
                                      "name": "CompactBitArray",
                                      "type": "Type",
                                    },
                                    "scope": Array [
                                      "cosmos.crypto.multisig.v1beta1",
                                    ],
                                    "scopeType": "protoImport",
                                    "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
                                  },
                                  "signatures": Object {
                                    "comment": "signatures is the signatures of the multi-signature",
                                    "id": 2,
                                    "options": Object {
                                      "(telescope:camel)": "signatures",
                                      "(telescope:name)": "signatures",
                                      "(telescope:orig)": "signatures",
                                    },
                                    "parsedType": Object {
                                      "name": "Data",
                                      "type": "Type",
                                    },
                                    "rule": "repeated",
                                    "scope": Array [
                                      "cosmos.tx.signing.v1beta1",
                                      "SignatureDescriptor",
                                    ],
                                    "type": "Data",
                                  },
                                },
                                "keyTypes": Array [],
                                "name": "Multi",
                                "nested": null,
                                "oneofs": undefined,
                                "options": undefined,
                                "type": "Type",
                              },
                              "Single": Object {
                                "comment": "Single is the signature data for a single signer",
                                "fields": Object {
                                  "mode": Object {
                                    "comment": "mode is the signing mode of the single signer",
                                    "id": 1,
                                    "options": Object {
                                      "(telescope:camel)": "mode",
                                      "(telescope:name)": "mode",
                                      "(telescope:orig)": "mode",
                                    },
                                    "parsedType": Object {
                                      "name": "SignMode",
                                      "type": "Enum",
                                    },
                                    "scope": Array [
                                      "cosmos.tx.signing.v1beta1",
                                    ],
                                    "type": "SignMode",
                                  },
                                  "signature": Object {
                                    "comment": "signature is the raw signature bytes",
                                    "id": 2,
                                    "isScalar": true,
                                    "options": Object {
                                      "(telescope:camel)": "signature",
                                      "(telescope:name)": "signature",
                                      "(telescope:orig)": "signature",
                                    },
                                    "parsedType": Object {
                                      "name": "bytes",
                                      "type": "native",
                                    },
                                    "type": "bytes",
                                    "typeNum": 14,
                                  },
                                },
                                "keyTypes": Array [],
                                "name": "Single",
                                "nested": null,
                                "oneofs": undefined,
                                "options": undefined,
                                "type": "Type",
                              },
                            },
                            "oneofs": Object {
                              "sum": Object {
                                "oneof": Array [
                                  "single",
                                  "multi",
                                ],
                              },
                            },
                            "options": undefined,
                            "type": "Type",
                          },
                        },
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                      "SignatureDescriptors": Object {
                        "comment": "SignatureDescriptors wraps multiple SignatureDescriptor's.",
                        "fields": Object {
                          "signatures": Object {
                            "comment": "signatures are the signature descriptors",
                            "id": 1,
                            "options": Object {
                              "(telescope:camel)": "signatures",
                              "(telescope:name)": "signatures",
                              "(telescope:orig)": "signatures",
                            },
                            "parsedType": Object {
                              "name": "SignatureDescriptor",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "cosmos.tx.signing.v1beta1",
                            ],
                            "type": "SignatureDescriptor",
                          },
                        },
                        "keyTypes": Array [],
                        "name": "SignatureDescriptors",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                    },
                    "type": "Namespace",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`cosmos/tx/v1beta1/tx 1`] = `
Object {
  "importNames": Object {
    "cosmos/base/v1beta1/coin.proto": Object {
      "Coin": "Coin",
    },
    "cosmos/crypto/multisig/v1beta1/multisig.proto": Object {
      "CompactBitArray": "CompactBitArray",
    },
    "cosmos/tx/signing/v1beta1/signing.proto": Object {
      "SignMode": "SignMode",
    },
    "google/protobuf/any.proto": Object {
      "Any": "Any",
    },
  },
  "imports": Array [
    "gogoproto/gogo.proto",
    "cosmos/crypto/multisig/v1beta1/multisig.proto",
    "cosmos/base/v1beta1/coin.proto",
    "cosmos/tx/signing/v1beta1/signing.proto",
    "google/protobuf/any.proto",
    "cosmos_proto/cosmos.proto",
  ],
  "package": "cosmos.tx.v1beta1",
  "parsedExports": Object {
    "AuthInfo": true,
    "AuxSignerData": true,
    "Fee": true,
    "ModeInfo": true,
    "SignDoc": true,
    "SignDocDirectAux": true,
    "SignerInfo": true,
    "Tip": true,
    "Tx": true,
    "TxBody": true,
    "TxRaw": true,
  },
  "parsedImports": Object {
    "cosmos/base/v1beta1/coin.proto": Array [
      "Coin",
    ],
    "cosmos/crypto/multisig/v1beta1/multisig.proto": Array [
      "CompactBitArray",
    ],
    "cosmos/tx/signing/v1beta1/signing.proto": Array [
      "SignMode",
    ],
    "google/protobuf/any.proto": Array [
      "Any",
    ],
  },
  "root": Object {
    "nested": Object {
      "cosmos": Object {
        "nested": Object {
          "tx": Object {
            "nested": Object {
              "v1beta1": Object {
                "nested": Object {
                  "AuthInfo": Object {
                    "comment": "AuthInfo describes the fee and signer modes that are used to sign a
transaction.",
                    "fields": Object {
                      "fee": Object {
                        "comment": "Fee is the fee and gas limit for the transaction. The first signer is the
primary signer and the one which pays the fee. The fee can be calculated
based on the cost of evaluating the body and doing signature verification
of the signers. This can be estimated via simulation.",
                        "id": 2,
                        "options": Object {
                          "(telescope:camel)": "fee",
                          "(telescope:name)": "fee",
                          "(telescope:orig)": "fee",
                        },
                        "parsedType": Object {
                          "name": "Fee",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "Fee",
                      },
                      "signerInfos": Object {
                        "comment": "signer_infos defines the signing modes for the required signers. The number
and order of elements must match the required signers from TxBody's
messages. The first element is the primary signer and the one which pays
the fee.",
                        "id": 1,
                        "options": Object {
                          "(telescope:camel)": "signerInfos",
                          "(telescope:name)": "signerInfos",
                          "(telescope:orig)": "signer_infos",
                        },
                        "parsedType": Object {
                          "name": "SignerInfo",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "SignerInfo",
                      },
                      "tip": Object {
                        "comment": "Tip is the optional tip used for meta-transactions.

Since: cosmos-sdk 0.46",
                        "id": 3,
                        "options": Object {
                          "(telescope:camel)": "tip",
                          "(telescope:name)": "tip",
                          "(telescope:orig)": "tip",
                        },
                        "parsedType": Object {
                          "name": "Tip",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "Tip",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "AuthInfo",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "AuxSignerData": Object {
                    "comment": "AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
tipper) builds and sends to the fee payer (who will build and broadcast the
actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
by the node if sent directly as-is.

Since: cosmos-sdk 0.46",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the bech32-encoded address of the auxiliary signer. If using
AuxSignerData across different chains, the bech32 prefix of the target
chain (where the final transaction is broadcasted) should be used.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "mode": Object {
                        "comment": "mode is the signing mode of the single signer",
                        "id": 3,
                        "import": "cosmos/tx/signing/v1beta1/signing.proto",
                        "importedName": "cosmos.tx.signing.v1beta1.SignMode",
                        "options": Object {
                          "(telescope:camel)": "mode",
                          "(telescope:name)": "mode",
                          "(telescope:orig)": "mode",
                        },
                        "parsedType": Object {
                          "name": "SignMode",
                          "type": "Enum",
                        },
                        "scope": Array [
                          "cosmos.tx.signing.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.tx.signing.v1beta1.SignMode",
                      },
                      "sig": Object {
                        "comment": "sig is the signature of the sign doc.",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "sig",
                          "(telescope:name)": "sig",
                          "(telescope:orig)": "sig",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "signDoc": Object {
                        "comment": "sign_doc is the SIGN_MOD_DIRECT_AUX sign doc that the auxiliary signer
signs. Note: we use the same sign doc even if we're signing with
LEGACY_AMINO_JSON.",
                        "id": 2,
                        "options": Object {
                          "(telescope:camel)": "signDoc",
                          "(telescope:name)": "signDoc",
                          "(telescope:orig)": "sign_doc",
                        },
                        "parsedType": Object {
                          "name": "SignDocDirectAux",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "SignDocDirectAux",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "AuxSignerData",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "Fee": Object {
                    "comment": "Fee includes the amount of coins paid in fees and the maximum
gas to be used by the transaction. The ratio yields an effective \\"gasprice\\",
which must be above some miminum to be accepted into the mempool.",
                    "fields": Object {
                      "amount": Object {
                        "comment": "amount is the amount of coins to be paid as a fee",
                        "id": 1,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "amount",
                          "(telescope:name)": "amount",
                          "(telescope:orig)": "amount",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                      "gasLimit": Object {
                        "comment": "gas_limit is the maximum gas that can be used in transaction processing
before an out of gas error occurs",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "gasLimit",
                          "(telescope:name)": "gasLimit",
                          "(telescope:orig)": "gas_limit",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "granter": Object {
                        "comment": "if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
not support fee grants, this will fail",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "granter",
                          "(telescope:name)": "granter",
                          "(telescope:orig)": "granter",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "payer": Object {
                        "comment": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
the payer must be a tx signer (and thus have signed this field in AuthInfo).
setting this field does *not* change the ordering of required signers for the transaction.",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "payer",
                          "(telescope:name)": "payer",
                          "(telescope:orig)": "payer",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "Fee",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "ModeInfo": Object {
                    "comment": "ModeInfo describes the signing mode of a single or nested multisig signer.",
                    "fields": Object {
                      "multi": Object {
                        "comment": "multi represents a nested multisig signer",
                        "id": 2,
                        "options": Object {
                          "(telescope:camel)": "multi",
                          "(telescope:name)": "multi",
                          "(telescope:orig)": "multi",
                        },
                        "parsedType": Object {
                          "name": "Multi",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                          "ModeInfo",
                        ],
                        "type": "Multi",
                      },
                      "single": Object {
                        "comment": "single represents a single signer",
                        "id": 1,
                        "options": Object {
                          "(telescope:camel)": "single",
                          "(telescope:name)": "single",
                          "(telescope:orig)": "single",
                        },
                        "parsedType": Object {
                          "name": "Single",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                          "ModeInfo",
                        ],
                        "type": "Single",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "ModeInfo",
                    "nested": Object {
                      "Multi": Object {
                        "comment": "Multi is the mode info for a multisig public key",
                        "fields": Object {
                          "bitarray": Object {
                            "comment": "bitarray specifies which keys within the multisig are signing",
                            "id": 1,
                            "import": "cosmos/crypto/multisig/v1beta1/multisig.proto",
                            "importedName": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
                            "options": Object {
                              "(telescope:camel)": "bitarray",
                              "(telescope:name)": "bitarray",
                              "(telescope:orig)": "bitarray",
                            },
                            "parsedType": Object {
                              "name": "CompactBitArray",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.crypto.multisig.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
                          },
                          "modeInfos": Object {
                            "comment": "mode_infos is the corresponding modes of the signers of the multisig
which could include nested multisig public keys",
                            "id": 2,
                            "options": Object {
                              "(telescope:camel)": "modeInfos",
                              "(telescope:name)": "modeInfos",
                              "(telescope:orig)": "mode_infos",
                            },
                            "parsedType": Object {
                              "name": "ModeInfo",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "cosmos.tx.v1beta1",
                            ],
                            "type": "ModeInfo",
                          },
                        },
                        "keyTypes": Array [],
                        "name": "Multi",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                      "Single": Object {
                        "comment": "Single is the mode info for a single signer. It is structured as a message
to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
future",
                        "fields": Object {
                          "mode": Object {
                            "comment": "mode is the signing mode of the single signer",
                            "id": 1,
                            "import": "cosmos/tx/signing/v1beta1/signing.proto",
                            "importedName": "cosmos.tx.signing.v1beta1.SignMode",
                            "options": Object {
                              "(telescope:camel)": "mode",
                              "(telescope:name)": "mode",
                              "(telescope:orig)": "mode",
                            },
                            "parsedType": Object {
                              "name": "SignMode",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "cosmos.tx.signing.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.tx.signing.v1beta1.SignMode",
                          },
                        },
                        "keyTypes": Array [],
                        "name": "Single",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                    },
                    "oneofs": Object {
                      "sum": Object {
                        "oneof": Array [
                          "single",
                          "multi",
                        ],
                      },
                    },
                    "options": undefined,
                    "type": "Type",
                  },
                  "SignDoc": Object {
                    "comment": "SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.",
                    "fields": Object {
                      "accountNumber": Object {
                        "comment": "account_number is the account number of the account in state",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "accountNumber",
                          "(telescope:name)": "accountNumber",
                          "(telescope:orig)": "account_number",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "authInfoBytes": Object {
                        "comment": "auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
representation in TxRaw.",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "authInfoBytes",
                          "(telescope:name)": "authInfoBytes",
                          "(telescope:orig)": "auth_info_bytes",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "bodyBytes": Object {
                        "comment": "body_bytes is protobuf serialization of a TxBody that matches the
representation in TxRaw.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "bodyBytes",
                          "(telescope:name)": "bodyBytes",
                          "(telescope:orig)": "body_bytes",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "chainId": Object {
                        "comment": "chain_id is the unique identifier of the chain this transaction targets.
It prevents signed transactions from being used on another chain by an
attacker",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "chainId",
                          "(telescope:name)": "chainId",
                          "(telescope:orig)": "chain_id",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SignDoc",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "SignDocDirectAux": Object {
                    "comment": "SignDocDirectAux is the type used for generating sign bytes for
SIGN_MODE_DIRECT_AUX.

Since: cosmos-sdk 0.46",
                    "fields": Object {
                      "accountNumber": Object {
                        "comment": "account_number is the account number of the account in state.",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "accountNumber",
                          "(telescope:name)": "accountNumber",
                          "(telescope:orig)": "account_number",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "bodyBytes": Object {
                        "comment": "body_bytes is protobuf serialization of a TxBody that matches the
representation in TxRaw.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "bodyBytes",
                          "(telescope:name)": "bodyBytes",
                          "(telescope:orig)": "body_bytes",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "chainId": Object {
                        "comment": "chain_id is the identifier of the chain this transaction targets.
It prevents signed transactions from being used on another chain by an
attacker.",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "chainId",
                          "(telescope:name)": "chainId",
                          "(telescope:orig)": "chain_id",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "publicKey": Object {
                        "comment": "public_key is the public key of the signing account.",
                        "id": 2,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(telescope:camel)": "publicKey",
                          "(telescope:name)": "publicKey",
                          "(telescope:orig)": "public_key",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "sequence": Object {
                        "comment": "sequence is the sequence number of the signing account.",
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "sequence",
                          "(telescope:name)": "sequence",
                          "(telescope:orig)": "sequence",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "tip": Object {
                        "comment": "Tip is the optional tip used for meta-transactions. It should be left
empty if the signer is not the tipper for this transaction.",
                        "id": 6,
                        "options": Object {
                          "(telescope:camel)": "tip",
                          "(telescope:name)": "tip",
                          "(telescope:orig)": "tip",
                        },
                        "parsedType": Object {
                          "name": "Tip",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "Tip",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SignDocDirectAux",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "SignerInfo": Object {
                    "comment": "SignerInfo describes the public key and signing mode of a single top-level
signer.",
                    "fields": Object {
                      "modeInfo": Object {
                        "comment": "mode_info describes the signing mode of the signer and is a nested
structure to support nested multisig pubkey's",
                        "id": 2,
                        "options": Object {
                          "(telescope:camel)": "modeInfo",
                          "(telescope:name)": "modeInfo",
                          "(telescope:orig)": "mode_info",
                        },
                        "parsedType": Object {
                          "name": "ModeInfo",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "ModeInfo",
                      },
                      "publicKey": Object {
                        "comment": "public_key is the public key of the signer. It is optional for accounts
that already exist in state. If unset, the verifier can use the required \\\\
signer address for this position and lookup the public key.",
                        "id": 1,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(telescope:camel)": "publicKey",
                          "(telescope:name)": "publicKey",
                          "(telescope:orig)": "public_key",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "sequence": Object {
                        "comment": "sequence is the sequence of the account, which describes the
number of committed transactions signed by a given address. It is used to
prevent replay attacks.",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "sequence",
                          "(telescope:name)": "sequence",
                          "(telescope:orig)": "sequence",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SignerInfo",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "Tip": Object {
                    "comment": "Tip is the tip used for meta-transactions.

Since: cosmos-sdk 0.46",
                    "fields": Object {
                      "amount": Object {
                        "comment": "amount is the amount of the tip",
                        "id": 1,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "amount",
                          "(telescope:name)": "amount",
                          "(telescope:orig)": "amount",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                      "tipper": Object {
                        "comment": "tipper is the address of the account paying for the tip",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(cosmos_proto.scalar)": "cosmos.AddressString",
                          "(telescope:camel)": "tipper",
                          "(telescope:name)": "tipper",
                          "(telescope:orig)": "tipper",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "Tip",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "Tx": Object {
                    "comment": "Tx is the standard type used for broadcasting transactions.",
                    "fields": Object {
                      "authInfo": Object {
                        "comment": "auth_info is the authorization related content of the transaction,
specifically signers, signer modes and fee",
                        "id": 2,
                        "options": Object {
                          "(telescope:camel)": "authInfo",
                          "(telescope:name)": "authInfo",
                          "(telescope:orig)": "auth_info",
                        },
                        "parsedType": Object {
                          "name": "AuthInfo",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "AuthInfo",
                      },
                      "body": Object {
                        "comment": "body is the processable content of the transaction",
                        "id": 1,
                        "options": Object {
                          "(telescope:camel)": "body",
                          "(telescope:name)": "body",
                          "(telescope:orig)": "body",
                        },
                        "parsedType": Object {
                          "name": "TxBody",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.tx.v1beta1",
                        ],
                        "type": "TxBody",
                      },
                      "signatures": Object {
                        "comment": "signatures is a list of signatures that matches the length and order of
AuthInfo's signer_infos to allow connecting signature meta information like
public key and signing mode by position.",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "signatures",
                          "(telescope:name)": "signatures",
                          "(telescope:orig)": "signatures",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "Tx",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "TxBody": Object {
                    "comment": "TxBody is the body of a transaction that all signers sign over.",
                    "fields": Object {
                      "extensionOptions": Object {
                        "comment": "extension_options are arbitrary options that can be added by chains
when the default options are not sufficient. If any of these are present
and can't be handled, the transaction will be rejected",
                        "id": 1023,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(telescope:camel)": "extensionOptions",
                          "(telescope:name)": "extensionOptions",
                          "(telescope:orig)": "extension_options",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "memo": Object {
                        "comment": "memo is any arbitrary note/comment to be added to the transaction.
WARNING: in clients, any publicly exposed text should not be called memo,
but should be called \`note\` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "memo",
                          "(telescope:name)": "memo",
                          "(telescope:orig)": "memo",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "messages": Object {
                        "comment": "messages is a list of messages to be executed. The required signers of
those messages define the number and order of elements in AuthInfo's
signer_infos and Tx's signatures. Each required signer address is added to
the list only the first time it occurs.
By convention, the first required signer (usually from the first message)
is referred to as the primary signer and pays the fee for the whole
transaction.",
                        "id": 1,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(telescope:camel)": "messages",
                          "(telescope:name)": "messages",
                          "(telescope:orig)": "messages",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "nonCriticalExtensionOptions": Object {
                        "comment": "extension_options are arbitrary options that can be added by chains
when the default options are not sufficient. If any of these are present
and can't be handled, they will be ignored",
                        "id": 2047,
                        "import": "google/protobuf/any.proto",
                        "importedName": "google.protobuf.Any",
                        "options": Object {
                          "(telescope:camel)": "nonCriticalExtensionOptions",
                          "(telescope:name)": "nonCriticalExtensionOptions",
                          "(telescope:orig)": "non_critical_extension_options",
                        },
                        "parsedType": Object {
                          "name": "Any",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Any",
                      },
                      "timeoutHeight": Object {
                        "comment": "timeout is the block height after which this transaction will not
be processed by the chain",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "timeoutHeight",
                          "(telescope:name)": "timeoutHeight",
                          "(telescope:orig)": "timeout_height",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "TxBody",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "TxRaw": Object {
                    "comment": "TxRaw is a variant of Tx that pins the signer's exact binary representation
of body and auth_info. This is used for signing, broadcasting and
verification. The binary \`serialize(tx: TxRaw)\` is stored in Tendermint and
the hash \`sha256(serialize(tx: TxRaw))\` becomes the \\"txhash\\", commonly used
as the transaction ID.",
                    "fields": Object {
                      "authInfoBytes": Object {
                        "comment": "auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
representation in SignDoc.",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "authInfoBytes",
                          "(telescope:name)": "authInfoBytes",
                          "(telescope:orig)": "auth_info_bytes",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "bodyBytes": Object {
                        "comment": "body_bytes is a protobuf serialization of a TxBody that matches the
representation in SignDoc.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "bodyBytes",
                          "(telescope:name)": "bodyBytes",
                          "(telescope:orig)": "body_bytes",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "signatures": Object {
                        "comment": "signatures is a list of signatures that matches the length and order of
AuthInfo's signer_infos to allow connecting signature meta information like
public key and signing mode by position.",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "signatures",
                          "(telescope:name)": "signatures",
                          "(telescope:orig)": "signatures",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "TxRaw",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`cosmwasm/wasm/v1/proposal 1`] = `
Object {
  "importNames": Object {
    "cosmos/base/v1beta1/coin.proto": Object {
      "Coin": "Coin",
    },
    "cosmwasm/wasm/v1/types.proto": Object {
      "AccessConfig": "AccessConfig",
    },
  },
  "imports": Array [
    "gogoproto/gogo.proto",
    "cosmos/base/v1beta1/coin.proto",
    "cosmwasm/wasm/v1/types.proto",
  ],
  "package": "cosmwasm.wasm.v1",
  "parsedExports": Object {
    "ClearAdminProposal": true,
    "ExecuteContractProposal": true,
    "InstantiateContractProposal": true,
    "MigrateContractProposal": true,
    "PinCodesProposal": true,
    "StoreCodeProposal": true,
    "SudoContractProposal": true,
    "UnpinCodesProposal": true,
    "UpdateAdminProposal": true,
  },
  "parsedImports": Object {
    "cosmos/base/v1beta1/coin.proto": Array [
      "Coin",
    ],
    "cosmwasm/wasm/v1/types.proto": Array [
      "AccessConfig",
    ],
  },
  "root": Object {
    "nested": Object {
      "cosmwasm": Object {
        "nested": Object {
          "wasm": Object {
            "nested": Object {
              "v1": Object {
                "nested": Object {
                  "ClearAdminProposal": Object {
                    "comment": "ClearAdminProposal gov proposal content type to clear the admin of a
contract.",
                    "fields": Object {
                      "contract": Object {
                        "comment": "Contract is the address of the smart contract",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contract",
                          "(telescope:name)": "contract",
                          "(telescope:orig)": "contract",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "ClearAdminProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "ExecuteContractProposal": Object {
                    "comment": "ExecuteContractProposal gov proposal content type to call execute on a
contract.",
                    "fields": Object {
                      "contract": Object {
                        "comment": "Contract is the address of the smart contract",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contract",
                          "(telescope:name)": "contract",
                          "(telescope:orig)": "contract",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "funds": Object {
                        "comment": "Funds coins that are transferred to the contract on instantiation",
                        "id": 6,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "funds",
                          "(telescope:name)": "funds",
                          "(telescope:orig)": "funds",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                      "msg": Object {
                        "comment": "Msg json encoded message to be passed to the contract as execute",
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "msg",
                          "(telescope:name)": "msg",
                          "(telescope:orig)": "msg",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "runAs": Object {
                        "comment": "RunAs is the address that is passed to the contract's environment as sender",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "runAs",
                          "(telescope:name)": "runAs",
                          "(telescope:orig)": "run_as",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "ExecuteContractProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "InstantiateContractProposal": Object {
                    "comment": "InstantiateContractProposal gov proposal content type to instantiate a
contract.",
                    "fields": Object {
                      "admin": Object {
                        "comment": "Admin is an optional address that can execute migrations",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "admin",
                          "(telescope:name)": "admin",
                          "(telescope:orig)": "admin",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "codeId": Object {
                        "comment": "CodeID is the reference to the stored WASM code",
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeID",
                          "(telescope:camel)": "codeId",
                          "(telescope:name)": "codeId",
                          "(telescope:orig)": "code_id",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "funds": Object {
                        "comment": "Funds coins that are transferred to the contract on instantiation",
                        "id": 8,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "funds",
                          "(telescope:name)": "funds",
                          "(telescope:orig)": "funds",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                      "label": Object {
                        "comment": "Label is optional metadata to be stored with a constract instance.",
                        "id": 6,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "label",
                          "(telescope:name)": "label",
                          "(telescope:orig)": "label",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "msg": Object {
                        "comment": "Msg json encoded message to be passed to the contract on instantiation",
                        "id": 7,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "msg",
                          "(telescope:name)": "msg",
                          "(telescope:orig)": "msg",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "runAs": Object {
                        "comment": "RunAs is the address that is passed to the contract's environment as sender",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "runAs",
                          "(telescope:name)": "runAs",
                          "(telescope:orig)": "run_as",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "InstantiateContractProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MigrateContractProposal": Object {
                    "comment": "MigrateContractProposal gov proposal content type to migrate a contract.",
                    "fields": Object {
                      "codeId": Object {
                        "comment": "CodeID references the new WASM codesudo",
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeID",
                          "(telescope:camel)": "codeId",
                          "(telescope:name)": "codeId",
                          "(telescope:orig)": "code_id",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "contract": Object {
                        "comment": "Contract is the address of the smart contract",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contract",
                          "(telescope:name)": "contract",
                          "(telescope:orig)": "contract",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "msg": Object {
                        "comment": "Msg json encoded message to be passed to the contract on migration",
                        "id": 6,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "msg",
                          "(telescope:name)": "msg",
                          "(telescope:orig)": "msg",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MigrateContractProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "PinCodesProposal": Object {
                    "comment": "PinCodesProposal gov proposal content type to pin a set of code ids in the
wasmvm cache.",
                    "fields": Object {
                      "codeIds": Object {
                        "comment": "CodeIDs references the new WASM codes",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeIDs",
                          "(gogoproto.moretags)": "yaml:code_ids",
                          "(telescope:camel)": "codeIds",
                          "(telescope:name)": "codeIds",
                          "(telescope:orig)": "code_ids",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:description",
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:title",
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "PinCodesProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "StoreCodeProposal": Object {
                    "comment": "StoreCodeProposal gov proposal content type to submit WASM code to the system",
                    "fields": Object {
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "instantiatePermission": Object {
                        "comment": "InstantiatePermission to apply on contract creation, optional",
                        "id": 7,
                        "import": "cosmwasm/wasm/v1/types.proto",
                        "importedName": "AccessConfig",
                        "options": Object {
                          "(telescope:camel)": "instantiatePermission",
                          "(telescope:name)": "instantiatePermission",
                          "(telescope:orig)": "instantiate_permission",
                        },
                        "parsedType": Object {
                          "name": "AccessConfig",
                          "type": "Type",
                        },
                        "scope": Array [
                          Array [
                            "cosmwasm.wasm.v1",
                          ],
                        ],
                        "scopeType": "import",
                        "type": "AccessConfig",
                      },
                      "runAs": Object {
                        "comment": "RunAs is the address that is passed to the contract's environment as sender",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "runAs",
                          "(telescope:name)": "runAs",
                          "(telescope:orig)": "run_as",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "wasmByteCode": Object {
                        "comment": "WASMByteCode can be raw or gzip compressed",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "WASMByteCode",
                          "(telescope:camel)": "wasmByteCode",
                          "(telescope:name)": "wasmByteCode",
                          "(telescope:orig)": "wasm_byte_code",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "StoreCodeProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "SudoContractProposal": Object {
                    "comment": "SudoContractProposal gov proposal content type to call sudo on a contract.",
                    "fields": Object {
                      "contract": Object {
                        "comment": "Contract is the address of the smart contract",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contract",
                          "(telescope:name)": "contract",
                          "(telescope:orig)": "contract",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "msg": Object {
                        "comment": "Msg json encoded message to be passed to the contract as sudo",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "msg",
                          "(telescope:name)": "msg",
                          "(telescope:orig)": "msg",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SudoContractProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "UnpinCodesProposal": Object {
                    "comment": "UnpinCodesProposal gov proposal content type to unpin a set of code ids in
the wasmvm cache.",
                    "fields": Object {
                      "codeIds": Object {
                        "comment": "CodeIDs references the WASM codes",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeIDs",
                          "(gogoproto.moretags)": "yaml:code_ids",
                          "(telescope:camel)": "codeIds",
                          "(telescope:name)": "codeIds",
                          "(telescope:orig)": "code_ids",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:description",
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:title",
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "UnpinCodesProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "UpdateAdminProposal": Object {
                    "comment": "UpdateAdminProposal gov proposal content type to set an admin for a contract.",
                    "fields": Object {
                      "contract": Object {
                        "comment": "Contract is the address of the smart contract",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contract",
                          "(telescope:name)": "contract",
                          "(telescope:orig)": "contract",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "description": Object {
                        "comment": "Description is a human readable text",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "description",
                          "(telescope:name)": "description",
                          "(telescope:orig)": "description",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "newAdmin": Object {
                        "comment": "NewAdmin address to be set",
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:new_admin",
                          "(telescope:camel)": "newAdmin",
                          "(telescope:name)": "newAdmin",
                          "(telescope:orig)": "new_admin",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "title": Object {
                        "comment": "Title is a short summary",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "title",
                          "(telescope:name)": "title",
                          "(telescope:orig)": "title",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "UpdateAdminProposal",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`cosmwasm/wasm/v1/query 1`] = `
Object {
  "importNames": Object {
    "cosmos/base/query/v1beta1/pagination.proto": Object {
      "PageRequest": "PageRequest",
      "PageResponse": "PageResponse",
    },
    "cosmwasm/wasm/v1/types.proto": Object {
      "ContractCodeHistoryEntry": "ContractCodeHistoryEntry",
      "ContractInfo": "ContractInfo",
      "Model": "Model",
    },
  },
  "imports": Array [
    "gogoproto/gogo.proto",
    "cosmwasm/wasm/v1/types.proto",
    "google/api/annotations.proto",
    "cosmos/base/query/v1beta1/pagination.proto",
  ],
  "package": "cosmwasm.wasm.v1",
  "parsedExports": Object {
    "CodeInfoResponse": true,
    "QueryAllContractStateRequest": true,
    "QueryAllContractStateResponse": true,
    "QueryCodeRequest": true,
    "QueryCodeResponse": true,
    "QueryCodesRequest": true,
    "QueryCodesResponse": true,
    "QueryContractHistoryRequest": true,
    "QueryContractHistoryResponse": true,
    "QueryContractInfoRequest": true,
    "QueryContractInfoResponse": true,
    "QueryContractsByCodeRequest": true,
    "QueryContractsByCodeResponse": true,
    "QueryPinnedCodesRequest": true,
    "QueryPinnedCodesResponse": true,
    "QueryRawContractStateRequest": true,
    "QueryRawContractStateResponse": true,
    "QuerySmartContractStateRequest": true,
    "QuerySmartContractStateResponse": true,
  },
  "parsedImports": Object {
    "cosmos/base/query/v1beta1/pagination.proto": Array [
      "PageRequest",
      "PageResponse",
    ],
    "cosmwasm/wasm/v1/types.proto": Array [
      "ContractInfo",
      "ContractCodeHistoryEntry",
      "Model",
    ],
  },
  "root": Object {
    "nested": Object {
      "cosmwasm": Object {
        "nested": Object {
          "wasm": Object {
            "nested": Object {
              "v1": Object {
                "nested": Object {
                  "CodeInfoResponse": Object {
                    "comment": "CodeInfoResponse contains code meta data from CodeInfo",
                    "fields": Object {
                      "codeId": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeID",
                          "(gogoproto.jsontag)": "id",
                          "(telescope:camel)": "codeId",
                          "(telescope:name)": "codeId",
                          "(telescope:orig)": "code_id",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "creator": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "creator",
                          "(telescope:name)": "creator",
                          "(telescope:orig)": "creator",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "dataHash": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "github.com/tendermint/tendermint/libs/bytes.HexBytes",
                          "(telescope:camel)": "dataHash",
                          "(telescope:name)": "dataHash",
                          "(telescope:orig)": "data_hash",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "CodeInfoResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": Object {
                      "(gogoproto.equal)": true,
                    },
                    "type": "Type",
                  },
                  "Query": Object {
                    "comment": "Query provides defines the gRPC querier service",
                    "methods": Object {
                      "AllContractState": Object {
                        "comment": "AllContractState gets all raw store data for a single contract",
                        "fields": Object {
                          "address": Object {
                            "comment": "address is the address of the contract",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "address",
                              "(telescope:name)": "address",
                              "(telescope:orig)": "address",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "pagination": Object {
                            "comment": "pagination defines an optional pagination for the request.",
                            "id": 2,
                            "import": "cosmos/base/query/v1beta1/pagination.proto",
                            "importedName": "cosmos.base.query.v1beta1.PageRequest",
                            "options": Object {
                              "(telescope:camel)": "pagination",
                              "(telescope:name)": "pagination",
                              "(telescope:orig)": "pagination",
                            },
                            "parsedType": Object {
                              "name": "PageRequest",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.query.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.query.v1beta1.PageRequest",
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "address",
                          ],
                          "queryParams": Array [
                            "pagination",
                          ],
                          "url": "/cosmwasm/wasm/v1/contract/{address}/state",
                        },
                        "name": "AllContractState",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/contract/{address}/state",
                        },
                        "requestType": "QueryAllContractStateRequest",
                        "responseType": "QueryAllContractStateResponse",
                        "type": "ServiceMethod",
                      },
                      "Code": Object {
                        "comment": "Code gets the binary code and metadata for a singe wasm code",
                        "fields": Object {
                          "codeId": Object {
                            "comment": "grpc-gateway_out does not support Go style CodID",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "codeId",
                              "(telescope:name)": "codeId",
                              "(telescope:orig)": "code_id",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "code_id",
                          ],
                          "queryParams": Array [
                            "codeId",
                          ],
                          "url": "/cosmwasm/wasm/v1/code/{code_id}",
                        },
                        "name": "Code",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/code/{code_id}",
                        },
                        "requestType": "QueryCodeRequest",
                        "responseType": "QueryCodeResponse",
                        "type": "ServiceMethod",
                      },
                      "Codes": Object {
                        "comment": "Codes gets the metadata for all stored wasm codes",
                        "fields": Object {
                          "pagination": Object {
                            "comment": "pagination defines an optional pagination for the request.",
                            "id": 1,
                            "import": "cosmos/base/query/v1beta1/pagination.proto",
                            "importedName": "cosmos.base.query.v1beta1.PageRequest",
                            "options": Object {
                              "(telescope:camel)": "pagination",
                              "(telescope:name)": "pagination",
                              "(telescope:orig)": "pagination",
                            },
                            "parsedType": Object {
                              "name": "PageRequest",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.query.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.query.v1beta1.PageRequest",
                          },
                        },
                        "info": Object {
                          "pathParams": Array [],
                          "queryParams": Array [
                            "pagination",
                          ],
                          "url": "/cosmwasm/wasm/v1/code",
                        },
                        "name": "Codes",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/code",
                        },
                        "requestType": "QueryCodesRequest",
                        "responseType": "QueryCodesResponse",
                        "type": "ServiceMethod",
                      },
                      "ContractHistory": Object {
                        "comment": "ContractHistory gets the contract code history",
                        "fields": Object {
                          "address": Object {
                            "comment": "address is the address of the contract to query",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "address",
                              "(telescope:name)": "address",
                              "(telescope:orig)": "address",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "pagination": Object {
                            "comment": "pagination defines an optional pagination for the request.",
                            "id": 2,
                            "import": "cosmos/base/query/v1beta1/pagination.proto",
                            "importedName": "cosmos.base.query.v1beta1.PageRequest",
                            "options": Object {
                              "(telescope:camel)": "pagination",
                              "(telescope:name)": "pagination",
                              "(telescope:orig)": "pagination",
                            },
                            "parsedType": Object {
                              "name": "PageRequest",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.query.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.query.v1beta1.PageRequest",
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "address",
                          ],
                          "queryParams": Array [
                            "pagination",
                          ],
                          "url": "/cosmwasm/wasm/v1/contract/{address}/history",
                        },
                        "name": "ContractHistory",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/contract/{address}/history",
                        },
                        "requestType": "QueryContractHistoryRequest",
                        "responseType": "QueryContractHistoryResponse",
                        "type": "ServiceMethod",
                      },
                      "ContractInfo": Object {
                        "comment": "ContractInfo gets the contract meta data",
                        "fields": Object {
                          "address": Object {
                            "comment": "address is the address of the contract to query",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "address",
                              "(telescope:name)": "address",
                              "(telescope:orig)": "address",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "address",
                          ],
                          "queryParams": Array [],
                          "url": "/cosmwasm/wasm/v1/contract/{address}",
                        },
                        "name": "ContractInfo",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/contract/{address}",
                        },
                        "requestType": "QueryContractInfoRequest",
                        "responseType": "QueryContractInfoResponse",
                        "type": "ServiceMethod",
                      },
                      "ContractsByCode": Object {
                        "comment": "ContractsByCode lists all smart contracts for a code id",
                        "fields": Object {
                          "codeId": Object {
                            "comment": "grpc-gateway_out does not support Go style CodID
pagination defines an optional pagination for the request.",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "codeId",
                              "(telescope:name)": "codeId",
                              "(telescope:orig)": "code_id",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "pagination": Object {
                            "comment": null,
                            "id": 2,
                            "import": "cosmos/base/query/v1beta1/pagination.proto",
                            "importedName": "cosmos.base.query.v1beta1.PageRequest",
                            "options": Object {
                              "(telescope:camel)": "pagination",
                              "(telescope:name)": "pagination",
                              "(telescope:orig)": "pagination",
                            },
                            "parsedType": Object {
                              "name": "PageRequest",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.query.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.query.v1beta1.PageRequest",
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "code_id",
                          ],
                          "queryParams": Array [
                            "codeId",
                            "pagination",
                          ],
                          "url": "/cosmwasm/wasm/v1/code/{code_id}/contracts",
                        },
                        "name": "ContractsByCode",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/code/{code_id}/contracts",
                        },
                        "requestType": "QueryContractsByCodeRequest",
                        "responseType": "QueryContractsByCodeResponse",
                        "type": "ServiceMethod",
                      },
                      "PinnedCodes": Object {
                        "comment": "PinnedCodes gets the pinned code ids",
                        "fields": Object {
                          "pagination": Object {
                            "comment": "pagination defines an optional pagination for the request.",
                            "id": 2,
                            "import": "cosmos/base/query/v1beta1/pagination.proto",
                            "importedName": "cosmos.base.query.v1beta1.PageRequest",
                            "options": Object {
                              "(telescope:camel)": "pagination",
                              "(telescope:name)": "pagination",
                              "(telescope:orig)": "pagination",
                            },
                            "parsedType": Object {
                              "name": "PageRequest",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.query.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.query.v1beta1.PageRequest",
                          },
                        },
                        "info": Object {
                          "pathParams": Array [],
                          "queryParams": Array [
                            "pagination",
                          ],
                          "url": "/cosmwasm/wasm/v1/codes/pinned",
                        },
                        "name": "PinnedCodes",
                        "options": Object {
                          "(google.api.http).get": "/cosmwasm/wasm/v1/codes/pinned",
                        },
                        "requestType": "QueryPinnedCodesRequest",
                        "responseType": "QueryPinnedCodesResponse",
                        "type": "ServiceMethod",
                      },
                      "RawContractState": Object {
                        "comment": "RawContractState gets single key from the raw store data of a contract",
                        "fields": Object {
                          "address": Object {
                            "comment": "address is the address of the contract",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "address",
                              "(telescope:name)": "address",
                              "(telescope:orig)": "address",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "queryData": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "queryData",
                              "(telescope:name)": "queryData",
                              "(telescope:orig)": "query_data",
                            },
                            "parsedType": Object {
                              "name": "bytes",
                              "type": "native",
                            },
                            "type": "bytes",
                            "typeNum": 14,
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "address",
                            "query_data",
                          ],
                          "queryParams": Array [
                            "queryData",
                          ],
                          "url": "/wasm/v1/contract/{address}/raw/{query_data}",
                        },
                        "name": "RawContractState",
                        "options": Object {
                          "(google.api.http).get": "/wasm/v1/contract/{address}/raw/{query_data}",
                        },
                        "requestType": "QueryRawContractStateRequest",
                        "responseType": "QueryRawContractStateResponse",
                        "type": "ServiceMethod",
                      },
                      "SmartContractState": Object {
                        "comment": "SmartContractState get smart query result from the contract",
                        "fields": Object {
                          "address": Object {
                            "comment": "address is the address of the contract",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "address",
                              "(telescope:name)": "address",
                              "(telescope:orig)": "address",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "queryData": Object {
                            "comment": "QueryData contains the query data passed to the contract",
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.casttype)": "RawContractMessage",
                              "(telescope:camel)": "queryData",
                              "(telescope:name)": "queryData",
                              "(telescope:orig)": "query_data",
                            },
                            "parsedType": Object {
                              "name": "bytes",
                              "type": "native",
                            },
                            "type": "bytes",
                            "typeNum": 14,
                          },
                        },
                        "info": Object {
                          "pathParams": Array [
                            "address",
                            "query_data",
                          ],
                          "queryParams": Array [
                            "queryData",
                          ],
                          "url": "/wasm/v1/contract/{address}/smart/{query_data}",
                        },
                        "name": "SmartContractState",
                        "options": Object {
                          "(google.api.http).get": "/wasm/v1/contract/{address}/smart/{query_data}",
                        },
                        "requestType": "QuerySmartContractStateRequest",
                        "responseType": "QuerySmartContractStateResponse",
                        "type": "ServiceMethod",
                      },
                    },
                    "name": "Query",
                    "serviceType": "Query",
                    "type": "Service",
                  },
                  "QueryAllContractStateRequest": Object {
                    "comment": "QueryAllContractStateRequest is the request type for the
Query/AllContractState RPC method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "pagination": Object {
                        "comment": "pagination defines an optional pagination for the request.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageRequest",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageRequest",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageRequest",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryAllContractStateRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryAllContractStateResponse": Object {
                    "comment": "QueryAllContractStateResponse is the response type for the
Query/AllContractState RPC method",
                    "fields": Object {
                      "models": Object {
                        "comment": null,
                        "id": 1,
                        "import": "cosmwasm/wasm/v1/types.proto",
                        "importedName": "Model",
                        "options": Object {
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "models",
                          "(telescope:name)": "models",
                          "(telescope:orig)": "models",
                        },
                        "parsedType": Object {
                          "name": "Model",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          Array [
                            "cosmwasm.wasm.v1",
                          ],
                        ],
                        "scopeType": "import",
                        "type": "Model",
                      },
                      "pagination": Object {
                        "comment": "pagination defines the pagination in the response.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageResponse",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageResponse",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryAllContractStateResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryCodeRequest": Object {
                    "comment": "QueryCodeRequest is the request type for the Query/Code RPC method",
                    "fields": Object {
                      "codeId": Object {
                        "comment": "grpc-gateway_out does not support Go style CodID",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "codeId",
                          "(telescope:name)": "codeId",
                          "(telescope:orig)": "code_id",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryCodeRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryCodeResponse": Object {
                    "comment": "QueryCodeResponse is the response type for the Query/Code RPC method",
                    "fields": Object {
                      "codeInfo": Object {
                        "comment": null,
                        "id": 1,
                        "options": Object {
                          "(gogoproto.embed)": true,
                          "(gogoproto.jsontag)": "",
                          "(telescope:camel)": "codeInfo",
                          "(telescope:name)": "codeInfo",
                          "(telescope:orig)": "code_info",
                        },
                        "parsedType": Object {
                          "name": "CodeInfoResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmwasm.wasm.v1",
                        ],
                        "type": "CodeInfoResponse",
                      },
                      "data": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.jsontag)": "data",
                          "(telescope:camel)": "data",
                          "(telescope:name)": "data",
                          "(telescope:orig)": "data",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryCodeResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": Object {
                      "(gogoproto.equal)": true,
                    },
                    "type": "Type",
                  },
                  "QueryCodesRequest": Object {
                    "comment": "QueryCodesRequest is the request type for the Query/Codes RPC method",
                    "fields": Object {
                      "pagination": Object {
                        "comment": "pagination defines an optional pagination for the request.",
                        "id": 1,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageRequest",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageRequest",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageRequest",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryCodesRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryCodesResponse": Object {
                    "comment": "QueryCodesResponse is the response type for the Query/Codes RPC method",
                    "fields": Object {
                      "codeInfos": Object {
                        "comment": null,
                        "id": 1,
                        "options": Object {
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "codeInfos",
                          "(telescope:name)": "codeInfos",
                          "(telescope:orig)": "code_infos",
                        },
                        "parsedType": Object {
                          "name": "CodeInfoResponse",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmwasm.wasm.v1",
                        ],
                        "type": "CodeInfoResponse",
                      },
                      "pagination": Object {
                        "comment": "pagination defines the pagination in the response.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageResponse",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageResponse",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryCodesResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryContractHistoryRequest": Object {
                    "comment": "QueryContractHistoryRequest is the request type for the Query/ContractHistory
RPC method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract to query",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "pagination": Object {
                        "comment": "pagination defines an optional pagination for the request.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageRequest",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageRequest",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageRequest",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractHistoryRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryContractHistoryResponse": Object {
                    "comment": "QueryContractHistoryResponse is the response type for the
Query/ContractHistory RPC method",
                    "fields": Object {
                      "entries": Object {
                        "comment": null,
                        "id": 1,
                        "import": "cosmwasm/wasm/v1/types.proto",
                        "importedName": "ContractCodeHistoryEntry",
                        "options": Object {
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "entries",
                          "(telescope:name)": "entries",
                          "(telescope:orig)": "entries",
                        },
                        "parsedType": Object {
                          "name": "ContractCodeHistoryEntry",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          Array [
                            "cosmwasm.wasm.v1",
                          ],
                        ],
                        "scopeType": "import",
                        "type": "ContractCodeHistoryEntry",
                      },
                      "pagination": Object {
                        "comment": "pagination defines the pagination in the response.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageResponse",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageResponse",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractHistoryResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryContractInfoRequest": Object {
                    "comment": "QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract to query",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractInfoRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryContractInfoResponse": Object {
                    "comment": "QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "contractInfo": Object {
                        "comment": null,
                        "id": 2,
                        "import": "cosmwasm/wasm/v1/types.proto",
                        "importedName": "ContractInfo",
                        "options": Object {
                          "(gogoproto.embed)": true,
                          "(gogoproto.jsontag)": "",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "contractInfo",
                          "(telescope:name)": "contractInfo",
                          "(telescope:orig)": "contract_info",
                        },
                        "parsedType": Object {
                          "name": "ContractInfo",
                          "type": "Type",
                        },
                        "scope": Array [
                          Array [
                            "cosmwasm.wasm.v1",
                          ],
                        ],
                        "scopeType": "import",
                        "type": "ContractInfo",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractInfoResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": Object {
                      "(gogoproto.equal)": true,
                    },
                    "type": "Type",
                  },
                  "QueryContractsByCodeRequest": Object {
                    "comment": "QueryContractsByCodeRequest is the request type for the Query/ContractsByCode
RPC method",
                    "fields": Object {
                      "codeId": Object {
                        "comment": "grpc-gateway_out does not support Go style CodID
pagination defines an optional pagination for the request.",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "codeId",
                          "(telescope:name)": "codeId",
                          "(telescope:orig)": "code_id",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "pagination": Object {
                        "comment": null,
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageRequest",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageRequest",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageRequest",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractsByCodeRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryContractsByCodeResponse": Object {
                    "comment": "QueryContractsByCodeResponse is the response type for the
Query/ContractsByCode RPC method",
                    "fields": Object {
                      "contracts": Object {
                        "comment": "contracts are a set of contract addresses",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "contracts",
                          "(telescope:name)": "contracts",
                          "(telescope:orig)": "contracts",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "string",
                        "typeNum": 13,
                      },
                      "pagination": Object {
                        "comment": "pagination defines the pagination in the response.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageResponse",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageResponse",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryContractsByCodeResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryPinnedCodesRequest": Object {
                    "comment": "QueryPinnedCodesRequest is the request type for the Query/PinnedCodes
RPC method",
                    "fields": Object {
                      "pagination": Object {
                        "comment": "pagination defines an optional pagination for the request.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageRequest",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageRequest",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageRequest",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryPinnedCodesRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryPinnedCodesResponse": Object {
                    "comment": "QueryPinnedCodesResponse is the response type for the
Query/PinnedCodes RPC method",
                    "fields": Object {
                      "codeIds": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customname)": "CodeIDs",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "codeIds",
                          "(telescope:name)": "codeIds",
                          "(telescope:orig)": "code_ids",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "rule": "repeated",
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "pagination": Object {
                        "comment": "pagination defines the pagination in the response.",
                        "id": 2,
                        "import": "cosmos/base/query/v1beta1/pagination.proto",
                        "importedName": "cosmos.base.query.v1beta1.PageResponse",
                        "options": Object {
                          "(telescope:camel)": "pagination",
                          "(telescope:name)": "pagination",
                          "(telescope:orig)": "pagination",
                        },
                        "parsedType": Object {
                          "name": "PageResponse",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.query.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.query.v1beta1.PageResponse",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryPinnedCodesResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryRawContractStateRequest": Object {
                    "comment": "QueryRawContractStateRequest is the request type for the
Query/RawContractState RPC method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "queryData": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "queryData",
                          "(telescope:name)": "queryData",
                          "(telescope:orig)": "query_data",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryRawContractStateRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QueryRawContractStateResponse": Object {
                    "comment": "QueryRawContractStateResponse is the response type for the
Query/RawContractState RPC method",
                    "fields": Object {
                      "data": Object {
                        "comment": "Data contains the raw store data",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "data",
                          "(telescope:name)": "data",
                          "(telescope:orig)": "data",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QueryRawContractStateResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QuerySmartContractStateRequest": Object {
                    "comment": "QuerySmartContractStateRequest is the request type for the
Query/SmartContractState RPC method",
                    "fields": Object {
                      "address": Object {
                        "comment": "address is the address of the contract",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "address",
                          "(telescope:name)": "address",
                          "(telescope:orig)": "address",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "queryData": Object {
                        "comment": "QueryData contains the query data passed to the contract",
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "queryData",
                          "(telescope:name)": "queryData",
                          "(telescope:orig)": "query_data",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QuerySmartContractStateRequest",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "QuerySmartContractStateResponse": Object {
                    "comment": "QuerySmartContractStateResponse is the response type for the
Query/SmartContractState RPC method",
                    "fields": Object {
                      "data": Object {
                        "comment": "Data contains the json data returned from the smart contract",
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.casttype)": "RawContractMessage",
                          "(telescope:camel)": "data",
                          "(telescope:name)": "data",
                          "(telescope:orig)": "data",
                        },
                        "parsedType": Object {
                          "name": "bytes",
                          "type": "native",
                        },
                        "type": "bytes",
                        "typeNum": 14,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "QuerySmartContractStateResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`google/api/expr/v1alpha1/checked 1`] = `
Object {
  "importNames": Object {
    "google/api/expr/v1alpha1/syntax.proto": Object {
      "Constant": "Constant",
      "Expr": "Expr",
      "SourceInfo": "SourceInfo",
    },
    "google/protobuf/empty.proto": Object {
      "Empty": "Empty",
    },
    "google/protobuf/struct.proto": Object {
      "NullValue": "NullValue",
    },
  },
  "imports": Array [
    "google/api/expr/v1alpha1/syntax.proto",
    "google/protobuf/empty.proto",
    "google/protobuf/struct.proto",
  ],
  "package": "google.api.expr.v1alpha1",
  "parsedExports": Object {
    "CheckedExpr": true,
    "Decl": true,
    "Reference": true,
    "Type": true,
  },
  "parsedImports": Object {
    "google/api/expr/v1alpha1/syntax.proto": Array [
      "SourceInfo",
      "Expr",
      "Constant",
    ],
    "google/protobuf/empty.proto": Array [
      "Empty",
    ],
    "google/protobuf/struct.proto": Array [
      "NullValue",
    ],
  },
  "root": Object {
    "nested": Object {
      "google": Object {
        "nested": Object {
          "api": Object {
            "nested": Object {
              "expr": Object {
                "nested": Object {
                  "v1alpha1": Object {
                    "nested": Object {
                      "CheckedExpr": Object {
                        "comment": "A CEL expression which has been successfully type checked.",
                        "fields": Object {
                          "expr": Object {
                            "comment": "The checked expression. Semantically equivalent to the parsed \`expr\`, but
may have structural differences.",
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Expr",
                            "options": Object {
                              "(telescope:camel)": "expr",
                              "(telescope:name)": "expr",
                              "(telescope:orig)": "expr",
                            },
                            "parsedType": Object {
                              "name": "Expr",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Expr",
                          },
                          "exprVersion": Object {
                            "comment": "The expr version indicates the major / minor version number of the \`expr\`
representation.

The most common reason for a version change will be to indicate to the CEL
runtimes that transformations have been performed on the expr during static
analysis. In some cases, this will save the runtime the work of applying
the same or similar transformations prior to evaluation.",
                            "id": 6,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "exprVersion",
                              "(telescope:name)": "exprVersion",
                              "(telescope:orig)": "expr_version",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "referenceMap": Object {
                            "comment": "A map from expression ids to resolved references.

The following entries are in this table:

- An Ident or Select expression is represented here if it resolves to a
declaration. For instance, if \`a.b.c\` is represented by
\`select(select(id(a), b), c)\`, and \`a.b\` resolves to a declaration,
while \`c\` is a field selection, then the reference is attached to the
nested select expression (but not to the id or or the outer select).
In turn, if \`a\` resolves to a declaration and \`b.c\` are field selections,
the reference is attached to the ident expression.
- Every Call expression has an entry here, identifying the function being
called.
- Every CreateStruct expression for a message has an entry, identifying
the message.",
                            "id": 2,
                            "keyType": "int64",
                            "parsedType": Object {
                              "name": "Reference",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Reference",
                          },
                          "sourceInfo": Object {
                            "comment": "The source info derived from input that generated the parsed \`expr\` and
any optimizations made during the type-checking pass.",
                            "id": 5,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "SourceInfo",
                            "options": Object {
                              "(telescope:camel)": "sourceInfo",
                              "(telescope:name)": "sourceInfo",
                              "(telescope:orig)": "source_info",
                            },
                            "parsedType": Object {
                              "name": "SourceInfo",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "SourceInfo",
                          },
                          "typeMap": Object {
                            "comment": "A map from expression ids to types.

Every expression node which has a type different than DYN has a mapping
here. If an expression has type DYN, it is omitted from this map to save
space.",
                            "id": 3,
                            "keyType": "int64",
                            "parsedType": Object {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                        },
                        "keyTypes": Array [
                          Object {
                            "comment": "A map from expression ids to resolved references.

The following entries are in this table:

- An Ident or Select expression is represented here if it resolves to a
declaration. For instance, if \`a.b.c\` is represented by
\`select(select(id(a), b), c)\`, and \`a.b\` resolves to a declaration,
while \`c\` is a field selection, then the reference is attached to the
nested select expression (but not to the id or or the outer select).
In turn, if \`a\` resolves to a declaration and \`b.c\` are field selections,
the reference is attached to the ident expression.
- Every Call expression has an entry here, identifying the function being
called.
- Every CreateStruct expression for a message has an entry, identifying
the message.",
                            "id": 2,
                            "keyType": "int64",
                            "name": "referenceMap",
                            "parsedType": Object {
                              "name": "Reference",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Reference",
                          },
                          Object {
                            "comment": "A map from expression ids to types.

Every expression node which has a type different than DYN has a mapping
here. If an expression has type DYN, it is omitted from this map to save
space.",
                            "id": 3,
                            "keyType": "int64",
                            "name": "typeMap",
                            "parsedType": Object {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                        ],
                        "name": "CheckedExpr",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                      "Decl": Object {
                        "comment": "Represents a declaration of a named value or function.

A declaration is part of the contract between the expression, the agent
evaluating that expression, and the caller requesting evaluation.",
                        "fields": Object {
                          "function": Object {
                            "comment": "Function declaration.",
                            "id": 3,
                            "options": Object {
                              "(telescope:camel)": "function",
                              "(telescope:name)": "function",
                              "(telescope:orig)": "function",
                            },
                            "parsedType": Object {
                              "name": "FunctionDecl",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "FunctionDecl",
                          },
                          "ident": Object {
                            "comment": "Identifier declaration.",
                            "id": 2,
                            "options": Object {
                              "(telescope:camel)": "ident",
                              "(telescope:name)": "ident",
                              "(telescope:orig)": "ident",
                            },
                            "parsedType": Object {
                              "name": "IdentDecl",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "IdentDecl",
                          },
                          "name": Object {
                            "comment": "The fully qualified name of the declaration.

Declarations are organized in containers and this represents the full path
to the declaration in its container, as in \`google.api.expr.Decl\`.

Declarations used as [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload] parameters may or may not
have a name depending on whether the overload is function declaration or a
function definition containing a result [Expr][google.api.expr.v1alpha1.Expr].",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "name",
                              "(telescope:name)": "name",
                              "(telescope:orig)": "name",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "keyTypes": Array [],
                        "name": "Decl",
                        "nested": Object {
                          "FunctionDecl": Object {
                            "comment": "Function declaration specifies one or more overloads which indicate the
function's parameter types and return type.

Functions have no observable side-effects (there may be side-effects like
logging which are not observable from CEL).",
                            "fields": Object {
                              "overloads": Object {
                                "comment": "Required. List of function overloads, must contain at least one overload.",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "overloads",
                                  "(telescope:name)": "overloads",
                                  "(telescope:orig)": "overloads",
                                },
                                "parsedType": Object {
                                  "name": "Overload",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                  "Decl",
                                  "FunctionDecl",
                                ],
                                "type": "Overload",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "FunctionDecl",
                            "nested": Object {
                              "Overload": Object {
                                "comment": "An overload indicates a function's parameter types and return type, and
may optionally include a function body described in terms of [Expr][google.api.expr.v1alpha1.Expr]
values.

Functions overloads are declared in either a function or method
call-style. For methods, the \`params[0]\` is the expected type of the
target receiver.

Overloads must have non-overlapping argument types after erasure of all
parameterized type variables (similar as type erasure in Java).",
                                "fields": Object {
                                  "doc": Object {
                                    "comment": "Documentation string for the overload.",
                                    "id": 6,
                                    "isScalar": true,
                                    "options": Object {
                                      "(telescope:camel)": "doc",
                                      "(telescope:name)": "doc",
                                      "(telescope:orig)": "doc",
                                    },
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "isInstanceFunction": Object {
                                    "comment": "Whether the function is to be used in a method call-style \`x.f(...)\`
of a function call-style \`f(x, ...)\`.

For methods, the first parameter declaration, \`params[0]\` is the
expected type of the target receiver.",
                                    "id": 5,
                                    "isScalar": true,
                                    "options": Object {
                                      "(telescope:camel)": "isInstanceFunction",
                                      "(telescope:name)": "isInstanceFunction",
                                      "(telescope:orig)": "is_instance_function",
                                    },
                                    "parsedType": Object {
                                      "name": "bool",
                                      "type": "native",
                                    },
                                    "type": "bool",
                                    "typeNum": 12,
                                  },
                                  "overloadId": Object {
                                    "comment": "Required. Globally unique overload name of the function which reflects
the function name and argument types.

This will be used by a [Reference][google.api.expr.v1alpha1.Reference] to indicate the \`overload_id\` that
was resolved for the function \`name\`.",
                                    "id": 1,
                                    "isScalar": true,
                                    "options": Object {
                                      "(telescope:camel)": "overloadId",
                                      "(telescope:name)": "overloadId",
                                      "(telescope:orig)": "overload_id",
                                    },
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "params": Object {
                                    "comment": "List of function parameter [Type][google.api.expr.v1alpha1.Type] values.

Param types are disjoint after generic type parameters have been
replaced with the type \`DYN\`. Since the \`DYN\` type is compatible with
any other type, this means that if \`A\` is a type parameter, the
function types \`int<A>\` and \`int<int>\` are not disjoint. Likewise,
\`map<string, string>\` is not disjoint from \`map<K, V>\`.

When the \`result_type\` of a function is a generic type param, the
type param name also appears as the \`type\` of on at least one params.",
                                    "id": 2,
                                    "options": Object {
                                      "(telescope:camel)": "params",
                                      "(telescope:name)": "params",
                                      "(telescope:orig)": "params",
                                    },
                                    "parsedType": Object {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "rule": "repeated",
                                    "scope": Array [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "resultType": Object {
                                    "comment": "Required. The result type of the function. For example, the operator
\`string.isEmpty()\` would have \`result_type\` of \`kind: BOOL\`.",
                                    "id": 4,
                                    "options": Object {
                                      "(telescope:camel)": "resultType",
                                      "(telescope:name)": "resultType",
                                      "(telescope:orig)": "result_type",
                                    },
                                    "parsedType": Object {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "scope": Array [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "typeParams": Object {
                                    "comment": "The type param names associated with the function declaration.

For example, \`function ex<K,V>(K key, map<K, V> map) : V\` would yield
the type params of \`K, V\`.",
                                    "id": 3,
                                    "isScalar": true,
                                    "options": Object {
                                      "(telescope:camel)": "typeParams",
                                      "(telescope:name)": "typeParams",
                                      "(telescope:orig)": "type_params",
                                    },
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "rule": "repeated",
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                },
                                "keyTypes": Array [],
                                "name": "Overload",
                                "nested": null,
                                "oneofs": undefined,
                                "options": undefined,
                                "type": "Type",
                              },
                            },
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                          "IdentDecl": Object {
                            "comment": "Identifier declaration which specifies its type and optional \`Expr\` value.

An identifier without a value is a declaration that must be provided at
evaluation time. An identifier with a value should resolve to a constant,
but may be used in conjunction with other identifiers bound at evaluation
time.",
                            "fields": Object {
                              "doc": Object {
                                "comment": "Documentation string for the identifier.",
                                "id": 3,
                                "isScalar": true,
                                "options": Object {
                                  "(telescope:camel)": "doc",
                                  "(telescope:name)": "doc",
                                  "(telescope:orig)": "doc",
                                },
                                "parsedType": Object {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "type": Object {
                                "comment": "Required. The type of the identifier.",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "type",
                                  "(telescope:name)": "type",
                                  "(telescope:orig)": "type",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "value": Object {
                                "comment": "The constant value of the identifier. If not specified, the identifier
must be supplied at evaluation time.",
                                "id": 2,
                                "import": "google/api/expr/v1alpha1/syntax.proto",
                                "importedName": "Constant",
                                "options": Object {
                                  "(telescope:camel)": "value",
                                  "(telescope:name)": "value",
                                  "(telescope:orig)": "value",
                                },
                                "parsedType": Object {
                                  "name": "Constant",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  Array [
                                    "google.api.expr.v1alpha1",
                                  ],
                                ],
                                "scopeType": "import",
                                "type": "Constant",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "IdentDecl",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                        },
                        "oneofs": Object {
                          "declKind": Object {
                            "oneof": Array [
                              "ident",
                              "function",
                            ],
                          },
                        },
                        "options": undefined,
                        "type": "Type",
                      },
                      "Reference": Object {
                        "comment": "Describes a resolved reference to a declaration.",
                        "fields": Object {
                          "name": Object {
                            "comment": "The fully qualified name of the declaration.",
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "name",
                              "(telescope:name)": "name",
                              "(telescope:orig)": "name",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "overloadId": Object {
                            "comment": "For references to functions, this is a list of \`Overload.overload_id\`
values which match according to typing rules.

If the list has more than one element, overload resolution among the
presented candidates must happen at runtime because of dynamic types. The
type checker attempts to narrow down this list as much as possible.

Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].",
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "overloadId",
                              "(telescope:name)": "overloadId",
                              "(telescope:orig)": "overload_id",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "rule": "repeated",
                            "type": "string",
                            "typeNum": 13,
                          },
                          "value": Object {
                            "comment": "For references to constants, this may contain the value of the
constant if known at compile time.",
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Constant",
                            "options": Object {
                              "(telescope:camel)": "value",
                              "(telescope:name)": "value",
                              "(telescope:orig)": "value",
                            },
                            "parsedType": Object {
                              "name": "Constant",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Constant",
                          },
                        },
                        "keyTypes": Array [],
                        "name": "Reference",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "type": "Type",
                      },
                      "Type": Object {
                        "comment": "Represents a CEL type.",
                        "fields": Object {
                          "abstractType": Object {
                            "comment": "Abstract, application defined type.",
                            "id": 14,
                            "options": Object {
                              "(telescope:camel)": "abstractType",
                              "(telescope:name)": "abstractType",
                              "(telescope:orig)": "abstract_type",
                            },
                            "parsedType": Object {
                              "name": "AbstractType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "AbstractType",
                          },
                          "dyn": Object {
                            "comment": "Dynamic type.",
                            "id": 1,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "options": Object {
                              "(telescope:camel)": "dyn",
                              "(telescope:name)": "dyn",
                              "(telescope:orig)": "dyn",
                            },
                            "parsedType": Object {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "error": Object {
                            "comment": "Error type.

During type-checking if an expression is an error, its type is propagated
as the \`ERROR\` type. This permits the type-checker to discover other
errors present in the expression.",
                            "id": 12,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "options": Object {
                              "(telescope:camel)": "error",
                              "(telescope:name)": "error",
                              "(telescope:orig)": "error",
                            },
                            "parsedType": Object {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "function": Object {
                            "comment": "Function type.",
                            "id": 8,
                            "options": Object {
                              "(telescope:camel)": "function",
                              "(telescope:name)": "function",
                              "(telescope:orig)": "function",
                            },
                            "parsedType": Object {
                              "name": "FunctionType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "FunctionType",
                          },
                          "listType": Object {
                            "comment": "Parameterized list with elements of \`list_type\`, e.g. \`list<timestamp>\`.",
                            "id": 6,
                            "options": Object {
                              "(telescope:camel)": "listType",
                              "(telescope:name)": "listType",
                              "(telescope:orig)": "list_type",
                            },
                            "parsedType": Object {
                              "name": "ListType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "ListType",
                          },
                          "mapType": Object {
                            "comment": "Parameterized map with typed keys and values.",
                            "id": 7,
                            "options": Object {
                              "(telescope:camel)": "mapType",
                              "(telescope:name)": "mapType",
                              "(telescope:orig)": "map_type",
                            },
                            "parsedType": Object {
                              "name": "MapType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "MapType",
                          },
                          "messageType": Object {
                            "comment": "Protocol buffer message type.

The \`message_type\` string specifies the qualified message type name. For
example, \`google.plus.Profile\`.",
                            "id": 9,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "messageType",
                              "(telescope:name)": "messageType",
                              "(telescope:orig)": "message_type",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "null": Object {
                            "comment": "Null value.",
                            "id": 2,
                            "import": "google/protobuf/struct.proto",
                            "importedName": "google.protobuf.NullValue",
                            "options": Object {
                              "(telescope:camel)": "null",
                              "(telescope:name)": "null",
                              "(telescope:orig)": "null",
                            },
                            "parsedType": Object {
                              "name": "NullValue",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.NullValue",
                          },
                          "primitive": Object {
                            "comment": "Primitive types: \`true\`, \`1u\`, \`-2.0\`, \`'string'\`, \`b'bytes'\`.",
                            "id": 3,
                            "options": Object {
                              "(telescope:camel)": "primitive",
                              "(telescope:name)": "primitive",
                              "(telescope:orig)": "primitive",
                            },
                            "parsedType": Object {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                          "type": Object {
                            "comment": "Type type.

The \`type\` value specifies the target type. e.g. int is type with a
target type of \`Primitive.INT\`.",
                            "id": 11,
                            "options": Object {
                              "(telescope:camel)": "type",
                              "(telescope:name)": "type",
                              "(telescope:orig)": "type",
                            },
                            "parsedType": Object {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                          "typeParam": Object {
                            "comment": "Type param type.

The \`type_param\` string specifies the type parameter name, e.g. \`list<E>\`
would be a \`list_type\` whose element type was a \`type_param\` type
named \`E\`.",
                            "id": 10,
                            "isScalar": true,
                            "options": Object {
                              "(telescope:camel)": "typeParam",
                              "(telescope:name)": "typeParam",
                              "(telescope:orig)": "type_param",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "wellKnown": Object {
                            "comment": "Well-known protobuf type such as \`google.protobuf.Timestamp\`.",
                            "id": 5,
                            "options": Object {
                              "(telescope:camel)": "wellKnown",
                              "(telescope:name)": "wellKnown",
                              "(telescope:orig)": "well_known",
                            },
                            "parsedType": Object {
                              "name": "WellKnownType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "WellKnownType",
                          },
                          "wrapper": Object {
                            "comment": "Wrapper of a primitive type, e.g. \`google.protobuf.Int64Value\`.",
                            "id": 4,
                            "options": Object {
                              "(telescope:camel)": "wrapper",
                              "(telescope:name)": "wrapper",
                              "(telescope:orig)": "wrapper",
                            },
                            "parsedType": Object {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                        },
                        "keyTypes": Array [],
                        "name": "Type",
                        "nested": Object {
                          "AbstractType": Object {
                            "comment": "Application defined abstract type.",
                            "fields": Object {
                              "name": Object {
                                "comment": "The fully qualified name of this abstract type.",
                                "id": 1,
                                "isScalar": true,
                                "options": Object {
                                  "(telescope:camel)": "name",
                                  "(telescope:name)": "name",
                                  "(telescope:orig)": "name",
                                },
                                "parsedType": Object {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "parameterTypes": Object {
                                "comment": "Parameter types for this abstract type.",
                                "id": 2,
                                "options": Object {
                                  "(telescope:camel)": "parameterTypes",
                                  "(telescope:name)": "parameterTypes",
                                  "(telescope:orig)": "parameter_types",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "AbstractType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                          "FunctionType": Object {
                            "comment": "Function type with result and arg types.",
                            "fields": Object {
                              "argTypes": Object {
                                "comment": "Argument types of the function.",
                                "id": 2,
                                "options": Object {
                                  "(telescope:camel)": "argTypes",
                                  "(telescope:name)": "argTypes",
                                  "(telescope:orig)": "arg_types",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "resultType": Object {
                                "comment": "Result type of the function.",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "resultType",
                                  "(telescope:name)": "resultType",
                                  "(telescope:orig)": "result_type",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "FunctionType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                          "ListType": Object {
                            "comment": "List type with typed elements, e.g. \`list<example.proto.MyMessage>\`.",
                            "fields": Object {
                              "elemType": Object {
                                "comment": "The element type.",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "elemType",
                                  "(telescope:name)": "elemType",
                                  "(telescope:orig)": "elem_type",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "ListType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                          "MapType": Object {
                            "comment": "Map type with parameterized key and value types, e.g. \`map<string, int>\`.",
                            "fields": Object {
                              "keyType": Object {
                                "comment": "The type of the key.",
                                "id": 1,
                                "options": Object {
                                  "(telescope:camel)": "keyType",
                                  "(telescope:name)": "keyType",
                                  "(telescope:orig)": "key_type",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "valueType": Object {
                                "comment": "The type of the value.",
                                "id": 2,
                                "options": Object {
                                  "(telescope:camel)": "valueType",
                                  "(telescope:name)": "valueType",
                                  "(telescope:orig)": "value_type",
                                },
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": Array [],
                            "name": "MapType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "type": "Type",
                          },
                          "PrimitiveType": Object {
                            "comment": "CEL primitive types.",
                            "comments": Object {
                              "BOOL": "Boolean type.",
                              "BYTES": "Bytes type.",
                              "DOUBLE": "Double type.

Proto-based float values are widened to double values.",
                              "INT64": "Int64 type.

Proto-based integer values are widened to int64.",
                              "PRIMITIVE_TYPE_UNSPECIFIED": "Unspecified type.",
                              "STRING": "String type.",
                              "UINT64": "Uint64 type.

Proto-based unsigned integer values are widened to uint64.",
                            },
                            "name": "PrimitiveType",
                            "type": "Enum",
                            "values": Object {
                              "BOOL": 1,
                              "BYTES": 6,
                              "DOUBLE": 4,
                              "INT64": 2,
                              "PRIMITIVE_TYPE_UNSPECIFIED": 0,
                              "STRING": 5,
                              "UINT64": 3,
                            },
                          },
                          "WellKnownType": Object {
                            "comment": "Well-known protobuf types treated with first-class support in CEL.",
                            "comments": Object {
                              "ANY": "Well-known protobuf.Any type.

Any types are a polymorphic message type. During type-checking they are
treated like \`DYN\` types, but at runtime they are resolved to a specific
message type specified at evaluation time.",
                              "DURATION": "Well-known protobuf.Duration type, internally referenced as \`duration\`.",
                              "TIMESTAMP": "Well-known protobuf.Timestamp type, internally referenced as \`timestamp\`.",
                              "WELL_KNOWN_TYPE_UNSPECIFIED": "Unspecified type.",
                            },
                            "name": "WellKnownType",
                            "type": "Enum",
                            "values": Object {
                              "ANY": 1,
                              "DURATION": 3,
                              "TIMESTAMP": 2,
                              "WELL_KNOWN_TYPE_UNSPECIFIED": 0,
                            },
                          },
                        },
                        "oneofs": Object {
                          "typeKind": Object {
                            "oneof": Array [
                              "dyn",
                              "null",
                              "primitive",
                              "wrapper",
                              "wellKnown",
                              "listType",
                              "mapType",
                              "function",
                              "messageType",
                              "typeParam",
                              "type",
                              "error",
                              "abstractType",
                            ],
                          },
                        },
                        "options": undefined,
                        "type": "Type",
                      },
                    },
                    "type": "Namespace",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`osmosis/claim/v1beta1/params 1`] = `
Object {
  "importNames": Object {
    "google/protobuf/duration.proto": Object {
      "Duration": "Duration",
    },
    "google/protobuf/timestamp.proto": Object {
      "Timestamp": "Timestamp",
    },
  },
  "imports": Array [
    "gogoproto/gogo.proto",
    "google/protobuf/duration.proto",
    "google/protobuf/timestamp.proto",
  ],
  "package": "osmosis.claim.v1beta1",
  "parsedExports": Object {
    "Params": true,
  },
  "parsedImports": Object {
    "google/protobuf/duration.proto": Array [
      "Duration",
    ],
    "google/protobuf/timestamp.proto": Array [
      "Timestamp",
    ],
  },
  "root": Object {
    "nested": Object {
      "osmosis": Object {
        "nested": Object {
          "claim": Object {
            "nested": Object {
              "v1beta1": Object {
                "nested": Object {
                  "Params": Object {
                    "comment": "Params defines the claim module's parameters.",
                    "fields": Object {
                      "airdropStartTime": Object {
                        "comment": null,
                        "id": 1,
                        "import": "google/protobuf/timestamp.proto",
                        "importedName": "google.protobuf.Timestamp",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:airdrop_start_time",
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdtime)": true,
                          "(telescope:camel)": "airdropStartTime",
                          "(telescope:name)": "airdropStartTime",
                          "(telescope:orig)": "airdrop_start_time",
                        },
                        "parsedType": Object {
                          "name": "Timestamp",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Timestamp",
                      },
                      "claimDenom": Object {
                        "comment": "denom of claimable asset",
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(telescope:camel)": "claimDenom",
                          "(telescope:name)": "claimDenom",
                          "(telescope:orig)": "claim_denom",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "durationOfDecay": Object {
                        "comment": null,
                        "id": 3,
                        "import": "google/protobuf/duration.proto",
                        "importedName": "google.protobuf.Duration",
                        "options": Object {
                          "(gogoproto.jsontag)": "duration_of_decay,omitempty",
                          "(gogoproto.moretags)": "yaml:duration_of_decay",
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdduration)": true,
                          "(telescope:camel)": "durationOfDecay",
                          "(telescope:name)": "durationOfDecay",
                          "(telescope:orig)": "duration_of_decay",
                        },
                        "parsedType": Object {
                          "name": "Duration",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Duration",
                      },
                      "durationUntilDecay": Object {
                        "comment": null,
                        "id": 2,
                        "import": "google/protobuf/duration.proto",
                        "importedName": "google.protobuf.Duration",
                        "options": Object {
                          "(gogoproto.jsontag)": "duration_until_decay,omitempty",
                          "(gogoproto.moretags)": "yaml:duration_until_decay",
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdduration)": true,
                          "(telescope:camel)": "durationUntilDecay",
                          "(telescope:name)": "durationUntilDecay",
                          "(telescope:orig)": "duration_until_decay",
                        },
                        "parsedType": Object {
                          "name": "Duration",
                          "type": "Type",
                        },
                        "scope": Array [
                          "google.protobuf",
                        ],
                        "scopeType": "protoImport",
                        "type": "google.protobuf.Duration",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "Params",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`osmosis/gamm/v1beta1/tx 1`] = `
Object {
  "importNames": Object {
    "cosmos/base/v1beta1/coin.proto": Object {
      "Coin": "Coin",
    },
  },
  "imports": Array [
    "gogoproto/gogo.proto",
    "cosmos/base/v1beta1/coin.proto",
  ],
  "package": "osmosis.gamm.v1beta1",
  "parsedExports": Object {
    "MsgExitPool": true,
    "MsgExitPoolResponse": true,
    "MsgExitSwapExternAmountOut": true,
    "MsgExitSwapExternAmountOutResponse": true,
    "MsgExitSwapShareAmountIn": true,
    "MsgExitSwapShareAmountInResponse": true,
    "MsgJoinPool": true,
    "MsgJoinPoolResponse": true,
    "MsgJoinSwapExternAmountIn": true,
    "MsgJoinSwapExternAmountInResponse": true,
    "MsgJoinSwapShareAmountOut": true,
    "MsgJoinSwapShareAmountOutResponse": true,
    "MsgSwapExactAmountIn": true,
    "MsgSwapExactAmountInResponse": true,
    "MsgSwapExactAmountOut": true,
    "MsgSwapExactAmountOutResponse": true,
    "SwapAmountInRoute": true,
    "SwapAmountOutRoute": true,
  },
  "parsedImports": Object {
    "cosmos/base/v1beta1/coin.proto": Array [
      "Coin",
    ],
  },
  "root": Object {
    "nested": Object {
      "osmosis": Object {
        "nested": Object {
          "gamm": Object {
            "nested": Object {
              "v1beta1": Object {
                "nested": Object {
                  "Msg": Object {
                    "comment": null,
                    "methods": Object {
                      "ExitPool": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareInAmount": Object {
                            "comment": null,
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:share_in_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareInAmount",
                              "(telescope:name)": "shareInAmount",
                              "(telescope:orig)": "shareInAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenOutMins": Object {
                            "comment": null,
                            "id": 4,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_out_min_amounts",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenOutMins",
                              "(telescope:name)": "tokenOutMins",
                              "(telescope:orig)": "tokenOutMins",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                        },
                        "info": undefined,
                        "name": "ExitPool",
                        "options": undefined,
                        "requestType": "MsgExitPool",
                        "responseType": "MsgExitPoolResponse",
                        "type": "ServiceMethod",
                      },
                      "ExitSwapExternAmountOut": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareInMaxAmount": Object {
                            "comment": null,
                            "id": 4,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:share_in_max_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareInMaxAmount",
                              "(telescope:name)": "shareInMaxAmount",
                              "(telescope:orig)": "shareInMaxAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenOut": Object {
                            "comment": null,
                            "id": 3,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_out",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenOut",
                              "(telescope:name)": "tokenOut",
                              "(telescope:orig)": "tokenOut",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                        },
                        "info": undefined,
                        "name": "ExitSwapExternAmountOut",
                        "options": undefined,
                        "requestType": "MsgExitSwapExternAmountOut",
                        "responseType": "MsgExitSwapExternAmountOutResponse",
                        "type": "ServiceMethod",
                      },
                      "ExitSwapShareAmountIn": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareInAmount": Object {
                            "comment": null,
                            "id": 4,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:share_in_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareInAmount",
                              "(telescope:name)": "shareInAmount",
                              "(telescope:orig)": "shareInAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenOutDenom": Object {
                            "comment": null,
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_out_denom",
                              "(telescope:camel)": "tokenOutDenom",
                              "(telescope:name)": "tokenOutDenom",
                              "(telescope:orig)": "tokenOutDenom",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenOutMinAmount": Object {
                            "comment": null,
                            "id": 5,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:token_out_min_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenOutMinAmount",
                              "(telescope:name)": "tokenOutMinAmount",
                              "(telescope:orig)": "tokenOutMinAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "info": undefined,
                        "name": "ExitSwapShareAmountIn",
                        "options": undefined,
                        "requestType": "MsgExitSwapShareAmountIn",
                        "responseType": "MsgExitSwapShareAmountInResponse",
                        "type": "ServiceMethod",
                      },
                      "JoinPool": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareOutAmount": Object {
                            "comment": null,
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:pool_amount_out",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareOutAmount",
                              "(telescope:name)": "shareOutAmount",
                              "(telescope:orig)": "shareOutAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenInMaxs": Object {
                            "comment": null,
                            "id": 4,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_in_max_amounts",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenInMaxs",
                              "(telescope:name)": "tokenInMaxs",
                              "(telescope:orig)": "tokenInMaxs",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                        },
                        "info": undefined,
                        "name": "JoinPool",
                        "options": undefined,
                        "requestType": "MsgJoinPool",
                        "responseType": "MsgJoinPoolResponse",
                        "type": "ServiceMethod",
                      },
                      "JoinSwapExternAmountIn": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareOutMinAmount": Object {
                            "comment": null,
                            "id": 4,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:share_out_min_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareOutMinAmount",
                              "(telescope:name)": "shareOutMinAmount",
                              "(telescope:orig)": "shareOutMinAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenIn": Object {
                            "comment": null,
                            "id": 3,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_in",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenIn",
                              "(telescope:name)": "tokenIn",
                              "(telescope:orig)": "tokenIn",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                        },
                        "info": undefined,
                        "name": "JoinSwapExternAmountIn",
                        "options": undefined,
                        "requestType": "MsgJoinSwapExternAmountIn",
                        "responseType": "MsgJoinSwapExternAmountInResponse",
                        "type": "ServiceMethod",
                      },
                      "JoinSwapShareAmountOut": Object {
                        "comment": null,
                        "fields": Object {
                          "poolId": Object {
                            "comment": null,
                            "id": 2,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:pool_id",
                              "(telescope:camel)": "poolId",
                              "(telescope:name)": "poolId",
                              "(telescope:orig)": "poolId",
                            },
                            "parsedType": Object {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "shareOutAmount": Object {
                            "comment": null,
                            "id": 4,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:share_out_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "shareOutAmount",
                              "(telescope:name)": "shareOutAmount",
                              "(telescope:orig)": "shareOutAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenInDenom": Object {
                            "comment": null,
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_in_denom",
                              "(telescope:camel)": "tokenInDenom",
                              "(telescope:name)": "tokenInDenom",
                              "(telescope:orig)": "tokenInDenom",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenInMaxAmount": Object {
                            "comment": null,
                            "id": 5,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:token_in_max_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenInMaxAmount",
                              "(telescope:name)": "tokenInMaxAmount",
                              "(telescope:orig)": "tokenInMaxAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "info": undefined,
                        "name": "JoinSwapShareAmountOut",
                        "options": undefined,
                        "requestType": "MsgJoinSwapShareAmountOut",
                        "responseType": "MsgJoinSwapShareAmountOutResponse",
                        "type": "ServiceMethod",
                      },
                      "SwapExactAmountIn": Object {
                        "comment": null,
                        "fields": Object {
                          "routes": Object {
                            "comment": null,
                            "id": 2,
                            "options": Object {
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "routes",
                              "(telescope:name)": "routes",
                              "(telescope:orig)": "routes",
                            },
                            "parsedType": Object {
                              "name": "SwapAmountInRoute",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "osmosis.gamm.v1beta1",
                            ],
                            "type": "SwapAmountInRoute",
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenIn": Object {
                            "comment": null,
                            "id": 3,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_in",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenIn",
                              "(telescope:name)": "tokenIn",
                              "(telescope:orig)": "tokenIn",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                          "tokenOutMinAmount": Object {
                            "comment": null,
                            "id": 4,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:token_out_min_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenOutMinAmount",
                              "(telescope:name)": "tokenOutMinAmount",
                              "(telescope:orig)": "tokenOutMinAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "info": undefined,
                        "name": "SwapExactAmountIn",
                        "options": undefined,
                        "requestType": "MsgSwapExactAmountIn",
                        "responseType": "MsgSwapExactAmountInResponse",
                        "type": "ServiceMethod",
                      },
                      "SwapExactAmountOut": Object {
                        "comment": null,
                        "fields": Object {
                          "routes": Object {
                            "comment": null,
                            "id": 2,
                            "options": Object {
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "routes",
                              "(telescope:name)": "routes",
                              "(telescope:orig)": "routes",
                            },
                            "parsedType": Object {
                              "name": "SwapAmountOutRoute",
                              "type": "Type",
                            },
                            "rule": "repeated",
                            "scope": Array [
                              "osmosis.gamm.v1beta1",
                            ],
                            "type": "SwapAmountOutRoute",
                          },
                          "sender": Object {
                            "comment": null,
                            "id": 1,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:sender",
                              "(telescope:camel)": "sender",
                              "(telescope:name)": "sender",
                              "(telescope:orig)": "sender",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenInMaxAmount": Object {
                            "comment": null,
                            "id": 3,
                            "isScalar": true,
                            "options": Object {
                              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                              "(gogoproto.moretags)": "yaml:token_in_max_amount",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenInMaxAmount",
                              "(telescope:name)": "tokenInMaxAmount",
                              "(telescope:orig)": "tokenInMaxAmount",
                            },
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "tokenOut": Object {
                            "comment": null,
                            "id": 4,
                            "import": "cosmos/base/v1beta1/coin.proto",
                            "importedName": "cosmos.base.v1beta1.Coin",
                            "options": Object {
                              "(gogoproto.moretags)": "yaml:token_out",
                              "(gogoproto.nullable)": false,
                              "(telescope:camel)": "tokenOut",
                              "(telescope:name)": "tokenOut",
                              "(telescope:orig)": "tokenOut",
                            },
                            "parsedType": Object {
                              "name": "Coin",
                              "type": "Type",
                            },
                            "scope": Array [
                              "cosmos.base.v1beta1",
                            ],
                            "scopeType": "protoImport",
                            "type": "cosmos.base.v1beta1.Coin",
                          },
                        },
                        "info": undefined,
                        "name": "SwapExactAmountOut",
                        "options": undefined,
                        "requestType": "MsgSwapExactAmountOut",
                        "responseType": "MsgSwapExactAmountOutResponse",
                        "type": "ServiceMethod",
                      },
                    },
                    "name": "Msg",
                    "serviceType": "Mutation",
                    "type": "Service",
                  },
                  "MsgExitPool": Object {
                    "comment": "===================== MsgExitPool",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareInAmount": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_in_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareInAmount",
                          "(telescope:name)": "shareInAmount",
                          "(telescope:orig)": "shareInAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenOutMins": Object {
                        "comment": null,
                        "id": 4,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out_min_amounts",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOutMins",
                          "(telescope:name)": "tokenOutMins",
                          "(telescope:orig)": "tokenOutMins",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgExitPool",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgExitPoolResponse": Object {
                    "comment": null,
                    "fields": Object {},
                    "keyTypes": Array [],
                    "name": "MsgExitPoolResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgExitSwapExternAmountOut": Object {
                    "comment": "===================== MsgExitSwapExternAmountOut",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareInMaxAmount": Object {
                        "comment": null,
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_in_max_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareInMaxAmount",
                          "(telescope:name)": "shareInMaxAmount",
                          "(telescope:orig)": "shareInMaxAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenOut": Object {
                        "comment": null,
                        "id": 3,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOut",
                          "(telescope:name)": "tokenOut",
                          "(telescope:orig)": "tokenOut",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgExitSwapExternAmountOut",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgExitSwapExternAmountOutResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "shareInAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_in_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareInAmount",
                          "(telescope:name)": "shareInAmount",
                          "(telescope:orig)": "shareInAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgExitSwapExternAmountOutResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgExitSwapShareAmountIn": Object {
                    "comment": "===================== MsgExitSwapShareAmountIn",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareInAmount": Object {
                        "comment": null,
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_in_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareInAmount",
                          "(telescope:name)": "shareInAmount",
                          "(telescope:orig)": "shareInAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenOutDenom": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out_denom",
                          "(telescope:camel)": "tokenOutDenom",
                          "(telescope:name)": "tokenOutDenom",
                          "(telescope:orig)": "tokenOutDenom",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenOutMinAmount": Object {
                        "comment": null,
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_out_min_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOutMinAmount",
                          "(telescope:name)": "tokenOutMinAmount",
                          "(telescope:orig)": "tokenOutMinAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgExitSwapShareAmountIn",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgExitSwapShareAmountInResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "tokenOutAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_out_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOutAmount",
                          "(telescope:name)": "tokenOutAmount",
                          "(telescope:orig)": "tokenOutAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgExitSwapShareAmountInResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinPool": Object {
                    "comment": "===================== MsgJoinPool
This is really MsgJoinPoolNoSwap",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareOutAmount": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:pool_amount_out",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareOutAmount",
                          "(telescope:name)": "shareOutAmount",
                          "(telescope:orig)": "shareOutAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenInMaxs": Object {
                        "comment": null,
                        "id": 4,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_in_max_amounts",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenInMaxs",
                          "(telescope:name)": "tokenInMaxs",
                          "(telescope:orig)": "tokenInMaxs",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgJoinPool",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinPoolResponse": Object {
                    "comment": null,
                    "fields": Object {},
                    "keyTypes": Array [],
                    "name": "MsgJoinPoolResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinSwapExternAmountIn": Object {
                    "comment": "===================== MsgJoinSwapExternAmountIn
TODO: Rename to MsgJoinSwapExactAmountIn",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareOutMinAmount": Object {
                        "comment": null,
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_out_min_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareOutMinAmount",
                          "(telescope:name)": "shareOutMinAmount",
                          "(telescope:orig)": "shareOutMinAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenIn": Object {
                        "comment": null,
                        "id": 3,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_in",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenIn",
                          "(telescope:name)": "tokenIn",
                          "(telescope:orig)": "tokenIn",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgJoinSwapExternAmountIn",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinSwapExternAmountInResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "shareOutAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_out_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareOutAmount",
                          "(telescope:name)": "shareOutAmount",
                          "(telescope:orig)": "shareOutAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgJoinSwapExternAmountInResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinSwapShareAmountOut": Object {
                    "comment": "===================== MsgJoinSwapShareAmountOut",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "shareOutAmount": Object {
                        "comment": null,
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:share_out_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "shareOutAmount",
                          "(telescope:name)": "shareOutAmount",
                          "(telescope:orig)": "shareOutAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenInDenom": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_in_denom",
                          "(telescope:camel)": "tokenInDenom",
                          "(telescope:name)": "tokenInDenom",
                          "(telescope:orig)": "tokenInDenom",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenInMaxAmount": Object {
                        "comment": null,
                        "id": 5,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_in_max_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenInMaxAmount",
                          "(telescope:name)": "tokenInMaxAmount",
                          "(telescope:orig)": "tokenInMaxAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgJoinSwapShareAmountOut",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgJoinSwapShareAmountOutResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "tokenInAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_in_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenInAmount",
                          "(telescope:name)": "tokenInAmount",
                          "(telescope:orig)": "tokenInAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgJoinSwapShareAmountOutResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgSwapExactAmountIn": Object {
                    "comment": null,
                    "fields": Object {
                      "routes": Object {
                        "comment": null,
                        "id": 2,
                        "options": Object {
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "routes",
                          "(telescope:name)": "routes",
                          "(telescope:orig)": "routes",
                        },
                        "parsedType": Object {
                          "name": "SwapAmountInRoute",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "osmosis.gamm.v1beta1",
                        ],
                        "type": "SwapAmountInRoute",
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenIn": Object {
                        "comment": null,
                        "id": 3,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_in",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenIn",
                          "(telescope:name)": "tokenIn",
                          "(telescope:orig)": "tokenIn",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                      "tokenOutMinAmount": Object {
                        "comment": null,
                        "id": 4,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_out_min_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOutMinAmount",
                          "(telescope:name)": "tokenOutMinAmount",
                          "(telescope:orig)": "tokenOutMinAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgSwapExactAmountIn",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgSwapExactAmountInResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "tokenOutAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_out_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOutAmount",
                          "(telescope:name)": "tokenOutAmount",
                          "(telescope:orig)": "tokenOutAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgSwapExactAmountInResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgSwapExactAmountOut": Object {
                    "comment": null,
                    "fields": Object {
                      "routes": Object {
                        "comment": null,
                        "id": 2,
                        "options": Object {
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "routes",
                          "(telescope:name)": "routes",
                          "(telescope:orig)": "routes",
                        },
                        "parsedType": Object {
                          "name": "SwapAmountOutRoute",
                          "type": "Type",
                        },
                        "rule": "repeated",
                        "scope": Array [
                          "osmosis.gamm.v1beta1",
                        ],
                        "type": "SwapAmountOutRoute",
                      },
                      "sender": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:sender",
                          "(telescope:camel)": "sender",
                          "(telescope:name)": "sender",
                          "(telescope:orig)": "sender",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenInMaxAmount": Object {
                        "comment": null,
                        "id": 3,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_in_max_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenInMaxAmount",
                          "(telescope:name)": "tokenInMaxAmount",
                          "(telescope:orig)": "tokenInMaxAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                      "tokenOut": Object {
                        "comment": null,
                        "id": 4,
                        "import": "cosmos/base/v1beta1/coin.proto",
                        "importedName": "cosmos.base.v1beta1.Coin",
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenOut",
                          "(telescope:name)": "tokenOut",
                          "(telescope:orig)": "tokenOut",
                        },
                        "parsedType": Object {
                          "name": "Coin",
                          "type": "Type",
                        },
                        "scope": Array [
                          "cosmos.base.v1beta1",
                        ],
                        "scopeType": "protoImport",
                        "type": "cosmos.base.v1beta1.Coin",
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgSwapExactAmountOut",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "MsgSwapExactAmountOutResponse": Object {
                    "comment": null,
                    "fields": Object {
                      "tokenInAmount": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.moretags)": "yaml:token_in_amount",
                          "(gogoproto.nullable)": false,
                          "(telescope:camel)": "tokenInAmount",
                          "(telescope:name)": "tokenInAmount",
                          "(telescope:orig)": "tokenInAmount",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "MsgSwapExactAmountOutResponse",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "SwapAmountInRoute": Object {
                    "comment": "===================== MsgSwapExactAmountIn",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "tokenOutDenom": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out_denom",
                          "(telescope:camel)": "tokenOutDenom",
                          "(telescope:name)": "tokenOutDenom",
                          "(telescope:orig)": "tokenOutDenom",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SwapAmountInRoute",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                  "SwapAmountOutRoute": Object {
                    "comment": "===================== MsgSwapExactAmountOut",
                    "fields": Object {
                      "poolId": Object {
                        "comment": null,
                        "id": 1,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:pool_id",
                          "(telescope:camel)": "poolId",
                          "(telescope:name)": "poolId",
                          "(telescope:orig)": "poolId",
                        },
                        "parsedType": Object {
                          "name": "uint64",
                          "type": "native",
                        },
                        "type": "uint64",
                        "typeNum": 8,
                      },
                      "tokenInDenom": Object {
                        "comment": null,
                        "id": 2,
                        "isScalar": true,
                        "options": Object {
                          "(gogoproto.moretags)": "yaml:token_out_denom",
                          "(telescope:camel)": "tokenInDenom",
                          "(telescope:name)": "tokenInDenom",
                          "(telescope:orig)": "tokenInDenom",
                        },
                        "parsedType": Object {
                          "name": "string",
                          "type": "native",
                        },
                        "type": "string",
                        "typeNum": 13,
                      },
                    },
                    "keyTypes": Array [],
                    "name": "SwapAmountOutRoute",
                    "nested": null,
                    "oneofs": undefined,
                    "options": undefined,
                    "type": "Type",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;
